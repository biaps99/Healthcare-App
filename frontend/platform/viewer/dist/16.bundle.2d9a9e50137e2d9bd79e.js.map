{"version":3,"sources":["webpack:///./googleCloud/api/GoogleCloudApi.js","webpack:///./googleCloud/utils/getServers.js","webpack:///./customHooks/useServer.js","webpack:///./customHooks/useQuery.js","webpack:///./routes/ViewerRouting.js"],"names":["accessToken","console","error","this","project","location","dataset","dicomStore","urlBase","urlStr","config","params","url","URL","data","search","URLSearchParams","fetch","fetchConfig","response","json","status","nextPageToken","pageToken","doRequest","key","subPage","hasOwnProperty","concat","isError","message","projectId","urlBaseProject","locationId","Error","method","headers","Authorization","healthcareApiEndpoint","isEqualServer","server","toCompare","serverLength","Object","keys","length","toCompareLength","getActiveServer","servers","find","a","active","getServers","appConfig","enableGoogleCloudAdapter","GoogleCloudApi","pathUrl","getUrlBaseDicomWeb","name","wadoUriRoot","qidoRoot","wadoRoot","imageRendering","thumbnailRendering","type","supportsFuzzyMatching","qidoSupportsIncludeField","GoogleCloudUtilServers","isValidServer","setServers","dispatch","useServerFromUrl","previousServers","activeServer","urlBasedServers","serverHasChanged","newServer","exists","some","bind","undefined","useLocation","UrlUtil","utils","urlUtil","getSeriesInstanceUIDs","seriesInstanceUIDs","routeLocation","queryFilters","queryString","getQueryFilters","querySeriesUIDs","_seriesInstanceUIDs","paramString","parseParam","ViewerRouting","routeMatch","match","studyInstanceUIDs","authToken","useQuery","get","user","getAccessToken","useSelector","state","usePrevious","useDispatch","useContext","AppContext","useServer","studyUIDs","seriesUIDs","ConnectedViewerRetrieveStudyData","propTypes","PropTypes","shape","string","isRequired","any"],"mappings":"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","file":"16.bundle.2d9a9e50137e2d9bd79e.js","sourcesContent":["class GoogleCloudApi {\n  setAccessToken(accessToken) {\n    if (!accessToken) console.error('Access token is empty');\n    this.accessToken = accessToken;\n  }\n\n  get fetchConfig() {\n    if (!this.accessToken) throw new Error('OIDC access_token is not set');\n    return {\n      method: 'GET',\n      headers: {\n        Authorization: 'Bearer ' + this.accessToken,\n      },\n    };\n  }\n\n  get urlBase() {\n    return this.healthcareApiEndpoint || 'https://healthcare.googleapis.com/v1beta1';\n  }\n\n  set urlBase(url) {\n    this.healthcareApiEndpoint = url;\n  }\n\n  get urlBaseProject() {\n    return this.urlBase + `/projects`;\n  }\n\n  getUrlBaseDicomWeb(project, location, dataset, dicomStore) {\n    return (\n      this.urlBase +\n      `/projects/${project}/locations/${location}/datasets/${dataset}/dicomStores/${dicomStore}/dicomWeb`\n    );\n  }\n\n  getUrlPath(project, location, dataset, dicomStore) {\n    `/projects/${project}/locations/${location}/datasets/${dataset}/dicomStores/${dicomStore}`;\n  }\n\n  async doRequest(urlStr, config = {}, params = {}) {\n    const url = new URL(urlStr);\n    let data = null;\n    url.search = new URLSearchParams(params);\n\n    try {\n      const response = await fetch(url, { ...this.fetchConfig, config });\n      try {\n        data = await response.json();\n      } catch (err) {}\n      if (response.status >= 200 && response.status < 300 && data != null) {\n        if (data.nextPageToken != null) {\n          params.pageToken = data.nextPageToken;\n          let subPage = await this.doRequest(urlStr, config, params);\n          for (let key in data) {\n            if (data.hasOwnProperty(key)) {\n              data[key] = data[key].concat(subPage.data[key]);\n            }\n          }\n        }\n        return {\n          isError: false,\n          status: response.status,\n          data,\n        };\n      } else {\n        return {\n          isError: true,\n          status: response.status,\n          message:\n            (data && data.error && data.error.message) || 'Unknown error',\n        };\n      }\n    } catch (err) {\n      if (data && data.error) {\n        return {\n          isError: true,\n          status: err.status,\n          message: err.response.data.error.message || 'Unspecified error',\n        };\n      }\n      return {\n        isError: true,\n        message: (err && err.message) || 'Oops! Something went wrong',\n      };\n    }\n  }\n\n  async loadProjects() {\n    return this.doRequest(\n      'https://cloudresourcemanager.googleapis.com/v1/projects'\n    );\n  }\n\n  async loadLocations(projectId) {\n    return this.doRequest(`${this.urlBaseProject}/${projectId}/locations`);\n  }\n\n  async loadDatasets(projectId, locationId) {\n    return this.doRequest(\n      `${this.urlBaseProject}/${projectId}/locations/${locationId}/datasets`\n    );\n  }\n\n  async loadDicomStores(dataset) {\n    return this.doRequest(`${this.urlBase}/${dataset}/dicomStores`);\n  }\n}\n\nexport default new GoogleCloudApi();\n","const getServers = (data, name) => {\n  const {\n    wadoUriRoot,\n    qidoRoot,\n    wadoRoot,\n    dataset = '',\n    dicomStore = '',\n    location = '',\n    project = '',\n  } = data;\n\n  return [\n    {\n      name: name,\n      dataset,\n      dicomStore,\n      location,\n      project,\n      imageRendering: 'wadors',\n      thumbnailRendering: 'wadors',\n      type: 'dicomWeb',\n      active: true,\n      wadoUriRoot,\n      qidoRoot,\n      wadoRoot,\n      supportsFuzzyMatching: false,\n      qidoSupportsIncludeField: false,\n    },\n  ];\n};\n\nconst isValidServer = server => {\n  return (\n    server &&\n    !!server.dataset &&\n    !!server.dicomStore &&\n    !!server.location &&\n    !!server.project\n  );\n};\n\nconst isEqualServer = (server = {}, toCompare = {}) => {\n  const serverLength = Object.keys(server).length;\n  const toCompareLength = Object.keys(toCompare).length;\n\n  if (!serverLength || !toCompareLength) {\n    return false;\n  }\n\n  return (\n    server.dataset === toCompare.dataset &&\n    server.dataset === toCompare.dataset &&\n    server.dicomStore === toCompare.dicomStore &&\n    server.location === toCompare.location &&\n    server.project === toCompare.project\n  );\n};\n\nexport { getServers, isValidServer, isEqualServer };\n","import React, { useContext } from 'react';\nimport GoogleCloudApi from '../googleCloud/api/GoogleCloudApi';\nimport usePrevious from './usePrevious';\n\nimport * as GoogleCloudUtilServers from '../googleCloud/utils/getServers';\nimport { useSelector, useDispatch } from 'react-redux';\nimport isEqual from 'lodash.isequal';\n\n// Contexts\nimport AppContext from '../context/AppContext';\n\nconst getActiveServer = servers => {\n  const isActive = a => a.active === true;\n\n  return servers && servers.servers && servers.servers.find(isActive);\n};\n\nconst getServers = (appConfig, project, location, dataset, dicomStore) => {\n  let servers = [];\n  if (appConfig.enableGoogleCloudAdapter) {\n    GoogleCloudApi.urlBase = appConfig.healthcareApiEndpoint;\n    const pathUrl = GoogleCloudApi.getUrlBaseDicomWeb(\n      project,\n      location,\n      dataset,\n      dicomStore\n    );\n    const data = {\n      project,\n      location,\n      dataset,\n      dicomStore,\n      wadoUriRoot: pathUrl,\n      qidoRoot: pathUrl,\n      wadoRoot: pathUrl,\n    };\n    servers = GoogleCloudUtilServers.getServers(data, dicomStore);\n    if (!isValidServer(servers[0], appConfig)) {\n      return;\n    }\n  }\n\n  return servers;\n};\n\nconst isValidServer = (server, appConfig) => {\n  if (appConfig.enableGoogleCloudAdapter) {\n    return GoogleCloudUtilServers.isValidServer(server);\n  }\n\n  return !!server;\n};\n\nconst setServers = (dispatch, servers) => {\n  const action = {\n    type: 'SET_SERVERS',\n    servers,\n  };\n  dispatch(action);\n};\n\nconst useServerFromUrl = (\n  servers = [],\n  previousServers,\n  activeServer,\n  urlBasedServers,\n  appConfig,\n  project,\n  location,\n  dataset,\n  dicomStore\n) => {\n  // update state from url available only when gcloud on\n  if (!appConfig.enableGoogleCloudAdapter) {\n    return false;\n  }\n\n  const serverHasChanged = previousServers !== servers && previousServers;\n\n  // do not update from url. use state instead.\n  if (serverHasChanged) {\n    return false;\n  }\n\n  // if no valid urlbased servers\n  if (!urlBasedServers || !urlBasedServers.length) {\n    return false;\n  } else if (!servers.length || !activeServer) {\n    // no current valid server\n    return true;\n  }\n\n  const newServer = urlBasedServers[0];\n\n  let exists = servers.some(\n    GoogleCloudUtilServers.isEqualServer.bind(undefined, newServer)\n  );\n\n  return !exists;\n};\n\nexport default function useServer({\n  project,\n  location,\n  dataset,\n  dicomStore,\n} = {}) {\n  // Hooks\n  const servers = useSelector(state => state && state.servers);\n  const previousServers = usePrevious(servers);\n  const dispatch = useDispatch();\n\n  const { appConfig = {} } = useContext(AppContext);\n\n  const activeServer = getActiveServer(servers);\n  const urlBasedServers =\n    getServers(appConfig, project, location, dataset, dicomStore) || [];\n  const shouldUpdateServer = useServerFromUrl(\n    servers.servers,\n    previousServers,\n    activeServer,\n    urlBasedServers,\n    appConfig,\n    project,\n    location,\n    dataset,\n    dicomStore\n  );\n\n  if (shouldUpdateServer) {\n    setServers(dispatch, urlBasedServers);\n  } else if (isValidServer(activeServer, appConfig)) {\n    return activeServer;\n  }\n}\n","import { useLocation } from 'react-router-dom';\n\n/**\n * hook that builds on useLocation to parse\n * the query string for you.\n *\n * @name useQuery\n */\nexport default function() {\n  return new URLSearchParams(useLocation().search);\n}\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { utils, user } from '@ohif/core';\nimport ConnectedViewerRetrieveStudyData from '../connectedComponents/ConnectedViewerRetrieveStudyData';\nimport useServer from '../customHooks/useServer';\nimport useQuery from '../customHooks/useQuery';\nconst { urlUtil: UrlUtil } = utils;\n\n/**\n * Get array of seriesUIDs from param or from queryString\n * @param {*} seriesInstanceUIDs\n * @param {*} location\n */\nconst getSeriesInstanceUIDs = (seriesInstanceUIDs, routeLocation) => {\n  const queryFilters = UrlUtil.queryString.getQueryFilters(routeLocation);\n  const querySeriesUIDs = queryFilters && queryFilters['seriesInstanceUID'];\n  const _seriesInstanceUIDs = seriesInstanceUIDs || querySeriesUIDs;\n\n  return UrlUtil.paramString.parseParam(_seriesInstanceUIDs);\n};\n\nfunction ViewerRouting({ match: routeMatch, location: routeLocation }) {\n  const {\n    project,\n    location,\n    dataset,\n    dicomStore,\n    studyInstanceUIDs,\n    seriesInstanceUIDs,\n  } = routeMatch.params;\n\n  let query = useQuery();\n  const authToken = query.get('token');\n\n  if (authToken) {\n    user.getAccessToken = () => authToken;\n  }\n\n  const server = useServer({ project, location, dataset, dicomStore });\n  const studyUIDs = UrlUtil.paramString.parseParam(studyInstanceUIDs);\n  const seriesUIDs = getSeriesInstanceUIDs(seriesInstanceUIDs, routeLocation);\n\n  if (server && studyUIDs) {\n    return (\n      <ConnectedViewerRetrieveStudyData\n        studyInstanceUIDs={studyUIDs}\n        seriesInstanceUIDs={seriesUIDs}\n      />\n    );\n  }\n\n  return null;\n}\n\nViewerRouting.propTypes = {\n  match: PropTypes.shape({\n    params: PropTypes.shape({\n      studyInstanceUIDs: PropTypes.string.isRequired,\n      seriesInstanceUIDs: PropTypes.string,\n      dataset: PropTypes.string,\n      dicomStore: PropTypes.string,\n      location: PropTypes.string,\n      project: PropTypes.string,\n    }),\n  }),\n  location: PropTypes.any,\n};\n\nexport default ViewerRouting;\n"],"sourceRoot":""}