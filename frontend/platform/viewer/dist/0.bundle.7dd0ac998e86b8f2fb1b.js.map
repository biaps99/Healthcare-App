{"version":3,"sources":["webpack:///./connectedComponents/ConnectedCineDialog.js","webpack:///./connectedComponents/ConnectedLayoutButton.js","webpack:///./connectedComponents/ToolbarRow.js","webpack:///./connectedComponents/ConnectedStudyBrowser.js","webpack:///./connectedComponents/findDisplaySetByUID.js","webpack:///./components/SidePanel.js","webpack:///./components/StudyPrefetcher.js","webpack:///./components/StudyLoadingMonitor.js","webpack:///./connectedComponents/Viewer.js","webpack:///./connectedComponents/ConnectedViewer.js","webpack:///./components/ViewportGrid/ViewportPane.js","webpack:///./components/ViewportGrid/ViewportGrid.js","webpack:///./components/ViewportGrid/DefaultViewport.js","webpack:///./components/ViewportGrid/ConnectedViewportGrid.js","webpack:///./connectedComponents/ViewerMain.js","webpack:///./connectedComponents/ConnectedViewerMain.js","webpack:///./lib/localFileLoaders/fileLoader.js","webpack:///./lib/localFileLoaders/pdfFileLoader.js","webpack:///./lib/localFileLoaders/dicomFileLoader.js","webpack:///./lib/localFileLoaders/fileLoaderService.js","webpack:///./lib/filesToStudies.js","webpack:///./components/ErrorBoundaryDialog/ErrorBoundaryDialog.js","webpack:///./components/ErrorBoundaryDialog/index.js"],"names":["scrollToIndex","toolImport","csTools","import","setViewportSpecificData","OHIF","redux","actions","ConnectedCineDialog","connect","state","viewports","cine","viewportSpecificData","activeViewportIndex","activeEnabledElement","commandsManager","runCommand","activeViewportCineData","isPlaying","cineFrameRate","dispatch","dispatchSetViewportSpecificData","viewportIndex","data","propsFromState","propsFromDispatch","ownProps","onPlayPauseChanged","cloneDeep","onFrameRateChanged","frameRate","onClickNextButton","stackData","getToolState","length","currentImageIdIndex","imageIds","onClickBackButton","onClickSkipToStart","onClickSkipToEnd","lastIndex","CineDialog","setLayout","setViewportActive","ConnectedLayoutButton","currentLayout","layout","onChange","selectedCell","numRows","row","numColumns","col","numViewports","i","viewport","plugin","vtk","push","onChangeFromDispatch","LayoutButton","ToolbarRow","props","dialog","dialogId","activeButtons","toolbarButtons","find","button","options","behavior","dismiss","id","filter","setState","toolbarButtonDefinitions","_getVisibleToolbarButtons","call","seriesPerStudyCount","_handleBuiltIn","bind","_onDerivedDisplaySetsLoadedAndCached","updateButtonGroups","panelModules","extensionManager","modules","MODULE_TYPES","PANEL","this","buttonGroups","left","right","forEach","panelExtension","panelModule","module","defaultContexts","Array","from","defaultContext","menuOptions","menuOption","contexts","context","hasActiveContext","activeContexts","some","actx","includes","isDisabled","studies","activeViewport","menuOptionEntry","value","target","icon","bottomLabel","label","badgeNumber","stateEvent","document","addEventListener","removeEventListener","prevProps","activeContextsChanged","prevStudies","prevActiveViewport","shouldUpdate","series","closeCineDialogIfNotApplicable","buttonComponents","_getButtonComponents","onPressRight","side","handleSidePanelChange","className","style","marginLeft","selectedRightSidePanel","onValueChanged","Component","_getCustomButtonComponent","CustomComponent","activeButtonsIds","map","isActive","parentContext","toolbarClickCallback","_handleToolbarButtonClick","key","_getExpandableButtonComponent","activeCommand","childButtons","buttons","childButton","onClick","indexOf","onGroupMenuClick","openMeasurementsPanel","openSegmentationPanel","_getDefaultButtonComponent","_this","hasCustomComponent","hasNestedButtonDefinitions","evt","commandName","Object","assign","commandOptions","type","toggables","togglable","toolbarModules","TOOLBAR","extension","definitions","definition","measurementButtons","el","moreSection","moreSectionButtons","otherButtons","newMeasurementsButton","concat","newMoreButton","index","splice","t","querySelector","getBoundingClientRect","x","y","newDialogId","create","content","defaultPosition","title","isLeftSidePanelOpen","PropTypes","bool","isRequired","isRightSidePanelOpen","selectedLeftSidePanel","string","func","arrayOf","array","any","modal","withTranslation","withModal","withDialog","withAppContext","setActiveViewportSpecificData","ConnectedStudyBrowser","onThumbnailClick","displaySetInstanceUID","displaySet","studyMetadata","isArray","reduce","all","current","currentDisplaySet","displaySets","ds","findDisplaySetByUID","servicesManager","services","LoggerService","UINotificationService","isDerived","Modality","getSourceDisplaySet","error","message","show","autoClose","referencedDisplaySet","activatedLabelmapPromise","then","activatedLabelmapIndex","selectionFired","CustomEvent","detail","dispatchEvent","Error","isSOPClassUIDSupported","StudyBrowser","SidePanel","isOpen","children","width","fromSideClass","styles","maxWidth","marginRight","Number","parseInt","classNames","propTypes","node","StudyPrefetcher","useEffect","studyPrefetcher","classes","getInstance","studiesMetadata","s","utils","studyMetadataManager","get","StudyInstanceUID","setStudies","onNewImage","image","imageId","getDisplaySets","addDisplaySet","study","getStudy","getSeries","instance","getDisplaySetBySOPInstanceUID","prefetch","element","onElementEnabled","cs","EVENTS","NEW_IMAGE","events","ELEMENT_ENABLED","destroy","shape","enabled","order","displaySetCount","number","preventCache","prefetchDisplaySetsTimeout","includeActiveDisplaySet","defaultProps","StudyLoadingListener","StudyLoadingMonitor","studyLoadingListener","clear","addStudies","Viewer","thumbnails","openMeasurements","log","info","earliestDate","Date","toISOString","latestDate","StudyDate","moment","Promise","resolve","timepointType","timepointId","studyInstanceUIDs","PatientID","isLocked","timepointData","query","timepointIds","timepoints","onTimepointsUpdated","measurements","onMeasurementsUpdated","activeServer","server","external","MeasurementApi","setConfiguration","dataExchange","retrieve","DICOMSR","retrieveMeasurements","store","storeMeasurements","TimepointApi","retrieveTimepoints","storeTimepoints","remove","removeTimepoint","update","updateTimepoint","disassociate","disassociateStudy","_getActiveViewport","dismissAll","_updateThumbnails","isStudyLoaded","reload","isNrrdImage","window","location","timepointApi","measurementApi","currentTimepointId","activeDisplaySetInstanceUID","undefined","_mapStudiesToThumbnails","prevActiveDisplaySetInstanceUID","VisiblePanelRight","panelExt","components","comp","component","VisiblePanelLeft","_openMeasurementsPanel","ErrorBoundaryDialog","selectedPanel","sideClicked","toUpperCase","slice","openKey","selectedKey","updatedState","prevSelectedPanel","isSameSelectedPanel","AppContext","Consumer","activeIndex","appContext","appConfig","showThumbnailProgressBar","displayProgress","ConnectedViewerMain","getActiveViewport","SeriesDescription","SeriesNumber","InstanceNumber","numImageFrames","images","getImageId","wadoRoot","object","_checkForDerivedDisplaySets","derivedDisplaySetsNumber","derivedDisplaySets","getDerivedDatasets","referencedSeriesInstanceUID","SeriesInstanceUID","_checkForSeriesInconsistencesWarnings","inconsistencyWarnings","reconstructionIssues","warning","ReconstructionIssues","DATASET_4D","VARYING_IMAGESDIMENSIONS","VARYING_IMAGESCOMPONENTS","VARYING_IMAGESORIENTATION","IRREGULAR_SPACING","MULTIFFRAMES","missingFrames","warn","loadError","segLoadErrorMessagge","_isDisplaySetActive","active","imageIndex","Math","floor","hasWarnings","hasDerivedDisplaySets","altImageText","setTimepoints","setMeasurements","getActiveServer","servers","a","ConnectedViewer","ViewportPane","onDrop","propClassName","useDrop","accept","drop","droppedItem","monitor","canDrop","isOver","collect","highlighted","hovered","ref","data-cy","loadAndCacheDerivedDisplaySets","ViewportGrid","availablePlugins","defaultPluginName","defaultPlugin","setViewportData","viewportData","rowSize","colSize","snackbar","useSnackbarContext","logger","useLogger","ViewportPanes","React","useMemo","pluginName","ViewportComponent","JSON","stringify","_getViewportComponent","display","gridTemplateRows","gridTemplateColumns","height","supportsDrop","DefaultViewport","getAvailableViewportModules","memoize","viewportModules","availableViewportModules","moduleDefinition","extensionId","ConnectedViewportGrid","VIEWPORT","larvitar","require","values","_values","ViewerMain","dirtyViewportPanes","viewportPane","foundDisplaySet","v","vp","findDisplaySet","registerNRRDImageLoader","dSet","fillEmptyViewportPanes","prevViewportAmount","viewportAmount","isVtk","keys","clearViewportSpecificData","FileLoader","file","dataset","PDFFileLoader","cornerstoneWADOImageLoader","wadouri","loadFileRequest","getDefaultStudy","StudyTime","AccessionNumber","ReferringPhysicianName","PatientName","PatientBirthdate","PatientSex","StudyId","StudyDescription","instances","metadata","SOPInstanceUID","SOPClassUID","Rows","Columns","NumberOfFrames","isLocalFile","metadataProvider","cornerstone","DICOMFileLoader","dicomData","dcmjs","DicomMessage","readFile","DicomMetaDictionary","naturalizeDataset","dict","addInstance","_meta","namifyDataset","meta","e","console","getStudyFromDataset","PatientBirthDate","StudyID","url","FileLoaderService","fileType","loader","getLoader","groupBy","list","groupByKey","listKey","nonKeyCounter","acc","obj","studyGroup","seriesGrouped","fileManager","add","loadFile","getDataset","getStudies","processFile","fileLoaderService","addFile","name","filesToStudies","files","processFilesPromises","groupSeries","flat","UIModalService","fallbackComponent","role","onError","componentStack","useState","open","setOpen","classnames","opened"],"mappings":"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","file":"0.bundle.7dd0ac998e86b8f2fb1b.js","sourcesContent":["import { connect } from 'react-redux';\nimport { CineDialog } from '@ohif/ui';\nimport OHIF from '@ohif/core';\nimport csTools from 'cornerstone-tools';\nimport { commandsManager } from './../App.js';\n// Our target output kills the `as` and \"import\" throws a keyword error\n// import { import as toolImport, getToolState } from 'cornerstone-tools';\nimport cloneDeep from 'lodash.clonedeep';\n\nconst toolImport = csTools.import;\nconst scrollToIndex = toolImport('util/scrollToIndex');\nconst { setViewportSpecificData } = OHIF.redux.actions;\n\n// Why do I need or care about any of this info?\n// A dispatch action should be able to pull this at the time of an event?\n// `isPlaying` and `cineFrameRate` might matter, but I think we can prop pass for those.\nconst mapStateToProps = state => {\n  // Get activeViewport's `cine` and `stack`\n  const { viewportSpecificData, activeViewportIndex } = state.viewports;\n  const { cine } = viewportSpecificData[activeViewportIndex] || {};\n  const dom = commandsManager.runCommand('getActiveViewportEnabledElement');\n\n  const cineData = cine || {\n    isPlaying: false,\n    cineFrameRate: 24,\n  };\n\n  // New props we're creating?\n  return {\n    activeEnabledElement: dom,\n    activeViewportCineData: cineData,\n    activeViewportIndex: state.viewports.activeViewportIndex,\n  };\n};\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    dispatchSetViewportSpecificData: (viewportIndex, data) => {\n      dispatch(setViewportSpecificData(viewportIndex, data));\n    },\n  };\n};\n\nconst mergeProps = (propsFromState, propsFromDispatch, ownProps) => {\n  const {\n    activeEnabledElement,\n    activeViewportCineData,\n    activeViewportIndex,\n  } = propsFromState;\n\n  return {\n    cineFrameRate: activeViewportCineData.cineFrameRate,\n    isPlaying: activeViewportCineData.isPlaying,\n    onPlayPauseChanged: isPlaying => {\n      const cine = cloneDeep(activeViewportCineData);\n      cine.isPlaying = !cine.isPlaying;\n\n      propsFromDispatch.dispatchSetViewportSpecificData(activeViewportIndex, {\n        cine,\n      });\n    },\n    onFrameRateChanged: frameRate => {\n      const cine = cloneDeep(activeViewportCineData);\n      cine.cineFrameRate = frameRate;\n\n      propsFromDispatch.dispatchSetViewportSpecificData(activeViewportIndex, {\n        cine,\n      });\n    },\n    onClickNextButton: () => {\n      const stackData = csTools.getToolState(activeEnabledElement, 'stack');\n      if (!stackData || !stackData.data || !stackData.data.length) return;\n      const { currentImageIdIndex, imageIds } = stackData.data[0];\n      if (currentImageIdIndex >= imageIds.length - 1) return;\n      scrollToIndex(activeEnabledElement, currentImageIdIndex + 1);\n    },\n    onClickBackButton: () => {\n      const stackData = csTools.getToolState(activeEnabledElement, 'stack');\n      if (!stackData || !stackData.data || !stackData.data.length) return;\n      const { currentImageIdIndex } = stackData.data[0];\n      if (currentImageIdIndex === 0) return;\n      scrollToIndex(activeEnabledElement, currentImageIdIndex - 1);\n    },\n    onClickSkipToStart: () => {\n      const stackData = csTools.getToolState(activeEnabledElement, 'stack');\n      if (!stackData || !stackData.data || !stackData.data.length) return;\n      scrollToIndex(activeEnabledElement, 0);\n    },\n    onClickSkipToEnd: () => {\n      const stackData = csTools.getToolState(activeEnabledElement, 'stack');\n      if (!stackData || !stackData.data || !stackData.data.length) return;\n      const lastIndex = stackData.data[0].imageIds.length - 1;\n      scrollToIndex(activeEnabledElement, lastIndex);\n    },\n  };\n};\n\nconst ConnectedCineDialog = connect(\n  mapStateToProps,\n  mapDispatchToProps,\n  mergeProps\n)(CineDialog);\n\nexport default ConnectedCineDialog;\n","import { LayoutButton } from '@ohif/ui';\nimport OHIF from '@ohif/core';\nimport { connect } from 'react-redux';\n\nconst { setLayout, setViewportActive } = OHIF.redux.actions;\n\nconst mapStateToProps = state => {\n  return {\n    currentLayout: state.viewports.layout,\n    activeViewportIndex: state.viewports.activeViewportIndex,\n  };\n};\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    // TODO: Change if layout switched becomes more complex\n    onChange: (selectedCell, currentLayout, activeViewportIndex) => {\n      const viewports = [];\n      const numRows = selectedCell.row + 1;\n      const numColumns = selectedCell.col + 1;\n      const numViewports = numRows * numColumns;\n\n      for (let i = 0; i < numViewports; i++) {\n        // Hacky way to allow users to exit MPR \"mode\"\n        const viewport = currentLayout.viewports[i];\n        let plugin = viewport && viewport.plugin;\n        if (viewport && viewport.vtk) {\n          plugin = 'cornerstone';\n        }\n\n        viewports.push({\n          plugin,\n        });\n      }\n      const layout = {\n        numRows,\n        numColumns,\n        viewports,\n      };\n\n      const maxActiveIndex = numViewports - 1;\n      if (activeViewportIndex > maxActiveIndex) {\n        dispatch(setViewportActive(0));\n      }\n\n      dispatch(setLayout(layout));\n    },\n  };\n};\n\nconst mergeProps = (propsFromState, propsFromDispatch) => {\n  const onChangeFromDispatch = propsFromDispatch.onChange;\n  const { currentLayout, activeViewportIndex } = propsFromState;\n\n  return {\n    onChange: selectedCell =>\n      onChangeFromDispatch(selectedCell, currentLayout, activeViewportIndex),\n  };\n};\n\nconst ConnectedLayoutButton = connect(\n  mapStateToProps,\n  mapDispatchToProps,\n  mergeProps\n)(LayoutButton);\n\nexport default ConnectedLayoutButton;\n","/* eslint-disable react/prop-types */\nimport React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { withTranslation } from 'react-i18next';\nimport { MODULE_TYPES } from '@ohif/core';\nimport {\n  ExpandableToolMenu,\n  RoundedButtonGroup,\n  ToolbarButton,\n  withModal,\n  withDialog,\n} from '@ohif/ui';\nimport './ToolbarRow.css';\nimport { commandsManager, extensionManager } from './../App.js';\nimport ConnectedCineDialog from './ConnectedCineDialog';\nimport ConnectedLayoutButton from './ConnectedLayoutButton';\nimport { withAppContext } from '../context/AppContext';\n\nclass ToolbarRow extends Component {\n  static propTypes = {\n    isLeftSidePanelOpen: PropTypes.bool.isRequired,\n    isRightSidePanelOpen: PropTypes.bool.isRequired,\n    selectedLeftSidePanel: PropTypes.string.isRequired,\n    selectedRightSidePanel: PropTypes.string.isRequired,\n    handleSidePanelChange: PropTypes.func.isRequired,\n    openMeasurementsPanel: PropTypes.func.isRequired,\n    openSegmentationPanel: PropTypes.func.isRequired,\n    activeContexts: PropTypes.arrayOf(PropTypes.string).isRequired,\n    studies: PropTypes.array,\n    t: PropTypes.func.isRequired,\n    dialog: PropTypes.any,\n    modal: PropTypes.any,\n  };\n\n  static defaultProps = {\n    studies: [],\n  };\n\n  constructor(props) {\n    super(props);\n\n    const toolbarButtonDefinitions = _getVisibleToolbarButtons.call(this);\n\n    this.state = {\n      toolbarButtons: toolbarButtonDefinitions,\n      activeButtons: [],\n    };\n\n    this.seriesPerStudyCount = [];\n\n    this._handleBuiltIn = _handleBuiltIn.bind(this);\n    this._onDerivedDisplaySetsLoadedAndCached = this._onDerivedDisplaySetsLoadedAndCached.bind(\n      this\n    );\n\n    this.updateButtonGroups();\n  }\n\n  updateButtonGroups() {\n    const panelModules = extensionManager.modules[MODULE_TYPES.PANEL];\n    //console.log(panelModules);\n\n    this.buttonGroups = {\n      left: [],\n      right: [],\n    };\n\n    // ~ FIND MENU OPTIONS\n    panelModules.forEach(panelExtension => {\n      const panelModule = panelExtension.module;\n      const defaultContexts = Array.from(panelModule.defaultContext);\n\n      panelModule.menuOptions.forEach(menuOption => {\n        const contexts = Array.from(menuOption.context || defaultContexts);\n        const hasActiveContext = this.props.activeContexts.some(actx =>\n          contexts.includes(actx)\n        );\n\n        // It's a bit beefy to pass studies; probably only need to be reactive on `studyInstanceUIDs` and activeViewport?\n        // Note: This does not cleanly handle `studies` prop updating with panel open\n        const isDisabled =\n          typeof menuOption.isDisabled === 'function' &&\n          menuOption.isDisabled(this.props.studies, this.props.activeViewport);\n\n        if (hasActiveContext && !isDisabled) {\n          const menuOptionEntry = {\n            value: menuOption.target,\n            icon: menuOption.icon,\n            bottomLabel: menuOption.label,\n            badgeNumber: menuOption.badgeNumber,\n            stateEvent: menuOption.stateEvent,\n          };\n          const from = menuOption.from || 'right';\n\n          this.buttonGroups[from].push(menuOptionEntry);\n        }\n      });\n    });\n  }\n\n  componentDidMount() {\n    /*\n     * TODO: Improve the way we notify parts of the app\n     * that depends on derived display sets to be loaded.\n     * (Implement pubsub for better tracking of derived display sets)\n     */\n    document.addEventListener(\n      'deriveddisplaysetsloadedandcached',\n      this._onDerivedDisplaySetsLoadedAndCached\n    );\n  }\n\n  componentWillUnmount() {\n    document.removeEventListener(\n      'deriveddisplaysetsloadedandcached',\n      this._onDerivedDisplaySetsLoadedAndCached\n    );\n  }\n\n  _onDerivedDisplaySetsLoadedAndCached() {\n    this.updateButtonGroups();\n    this.setState({\n      toolbarButtons: _getVisibleToolbarButtons.call(this),\n    });\n  }\n\n  componentDidUpdate(prevProps) {\n    const activeContextsChanged =\n      prevProps.activeContexts !== this.props.activeContexts;\n\n    const prevStudies = prevProps.studies;\n    const prevActiveViewport = prevProps.activeViewport;\n    const activeViewport = this.props.activeViewport;\n    const studies = this.props.studies;\n    const seriesPerStudyCount = this.seriesPerStudyCount;\n\n    let shouldUpdate = false;\n\n    if (\n      prevStudies.length !== studies.length ||\n      prevActiveViewport !== activeViewport\n    ) {\n      shouldUpdate = true;\n    } else {\n      for (let i = 0; i < studies.length; i++) {\n        if (studies[i].series.length !== seriesPerStudyCount[i]) {\n          seriesPerStudyCount[i] = studies[i].series.length;\n\n          shouldUpdate = true;\n          break;\n        }\n      }\n    }\n\n    if (shouldUpdate) {\n      this.updateButtonGroups();\n    }\n\n    if (activeContextsChanged) {\n      this.setState(\n        {\n          toolbarButtons: _getVisibleToolbarButtons.call(this),\n        },\n        this.closeCineDialogIfNotApplicable\n      );\n    }\n  }\n\n  closeCineDialogIfNotApplicable = () => {\n    const { dialog } = this.props;\n    let { dialogId, activeButtons, toolbarButtons } = this.state;\n    if (dialogId) {\n      const cineButtonPresent = toolbarButtons.find(\n        button => button.options && button.options.behavior === 'CINE'\n      );\n      if (!cineButtonPresent) {\n        dialog.dismiss({ id: dialogId });\n        activeButtons = activeButtons.filter(\n          button => button.options && button.options.behavior !== 'CINE'\n        );\n        this.setState({ dialogId: null, activeButtons });\n      }\n    }\n  };\n\n  render() {\n    const buttonComponents = _getButtonComponents.call(\n      this,\n      this.state.toolbarButtons,\n      this.state.activeButtons\n    );\n\n    const onPress = (side, value) => {\n      this.props.handleSidePanelChange(side, value);\n    };\n\n    const onPressRight = onPress.bind(this, 'right');\n\n    //console.log(this.buttonGroups);\n\n    return (\n      <>\n        <div className=\"ToolbarRow\">\n          {buttonComponents}\n          <ConnectedLayoutButton />\n          <div\n            className=\"pull-right m-t-1 rm-x-1\"\n            style={{ marginLeft: 'auto' }}\n          >\n            {this.buttonGroups.right.length && (\n              <RoundedButtonGroup\n                options={this.buttonGroups.right}\n                value={this.props.selectedRightSidePanel || ''}\n                onValueChanged={onPressRight}\n              />\n            )}\n          </div>\n        </div>\n      </>\n    );\n  }\n}\n\nfunction _getCustomButtonComponent(button, activeButtons) {\n  const CustomComponent = button.CustomComponent;\n  const isValidComponent = typeof CustomComponent === 'function';\n\n  // Check if its a valid customComponent. Later on an CustomToolbarComponent interface could be implemented.\n  if (isValidComponent) {\n    const parentContext = this;\n    const activeButtonsIds = activeButtons.map(button => button.id);\n    const isActive = activeButtonsIds.includes(button.id);\n\n    return (\n      <CustomComponent\n        parentContext={parentContext}\n        toolbarClickCallback={_handleToolbarButtonClick.bind(this)}\n        button={button}\n        key={button.id}\n        activeButtons={activeButtonsIds}\n        isActive={isActive}\n      />\n    );\n  }\n}\n\nfunction _getExpandableButtonComponent(button, activeButtons) {\n  // Iterate over button definitions and update `onClick` behavior\n  let activeCommand;\n  const childButtons = button.buttons.map(childButton => {\n    childButton.onClick = _handleToolbarButtonClick.bind(this, childButton);\n\n    if (activeButtons.map(button => button.id).indexOf(childButton.id) > -1) {\n      activeCommand = childButton.id;\n    }\n\n    return childButton;\n  });\n\n  if (button.id === 'Annotations') {\n    return (\n      <ExpandableToolMenu\n        key={button.id}\n        label={button.label}\n        icon={button.icon}\n        buttons={childButtons}\n        activeCommand={activeCommand}\n        onGroupMenuClick={this.props.openMeasurementsPanel}\n      />\n    );\n  } else if (button.id === 'SegTools') {\n    return (\n      <ExpandableToolMenu\n        key={button.id}\n        label={button.label}\n        icon={'inline-edit'}\n        buttons={childButtons}\n        activeCommand={activeCommand}\n        onGroupMenuClick={this.props.openSegmentationPanel}\n      />\n    );\n  }\n\n  return (\n    <ExpandableToolMenu\n      key={button.id}\n      label={button.label}\n      icon={button.icon}\n      buttons={childButtons}\n      activeCommand={activeCommand}\n    />\n  );\n}\n\nfunction _getDefaultButtonComponent(button, activeButtons) {\n  return (\n    <ToolbarButton\n      key={button.id}\n      label={button.label}\n      icon={button.icon}\n      onClick={_handleToolbarButtonClick.bind(this, button)}\n      isActive={activeButtons.map(button => button.id).includes(button.id)}\n    />\n  );\n}\n/**\n * Determine which extension buttons should be showing, if they're\n * active, and what their onClick behavior should be.\n */\nfunction _getButtonComponents(toolbarButtons, activeButtons) {\n  const _this = this;\n\n  return toolbarButtons.map(button => {\n    const hasCustomComponent = button.CustomComponent;\n    const hasNestedButtonDefinitions = button.buttons && button.buttons.length;\n\n    if (hasCustomComponent) {\n      return _getCustomButtonComponent.call(_this, button, activeButtons);\n    }\n\n    if (hasNestedButtonDefinitions) {\n      return _getExpandableButtonComponent.call(_this, button, activeButtons);\n    }\n\n    return _getDefaultButtonComponent.call(_this, button, activeButtons);\n  });\n}\n\n/**\n * TODO: DEPRECATE\n * This is used exclusively in `extensions/cornerstone/src`\n * We have better ways with new UI Services to trigger \"builtin\" behaviors\n *\n * A handy way for us to handle different button types. IE. firing commands for\n * buttons, or initiation built in behavior.\n *\n * @param {*} button\n * @param {*} evt\n * @param {*} props\n */\nfunction _handleToolbarButtonClick(button, evt, props) {\n  const { activeButtons } = this.state;\n\n  if (button.commandName) {\n    const options = Object.assign({ evt }, button.commandOptions);\n    commandsManager.runCommand(button.commandName, options);\n  }\n\n  // TODO: Use Types ENUM\n  // TODO: We can update this to be a `getter` on the extension to query\n  //       For the active tools after we apply our updates?\n  if (button.type === 'setToolActive') {\n    const toggables = activeButtons.filter(\n      ({ options }) => options && !options.togglable\n    );\n    this.setState({ activeButtons: [...toggables, button] });\n  } else if (button.type === 'builtIn') {\n    this._handleBuiltIn(button);\n  }\n}\n\n/**\n *\n */\nfunction _getVisibleToolbarButtons() {\n  const toolbarModules = extensionManager.modules[MODULE_TYPES.TOOLBAR];\n  const toolbarButtonDefinitions = [];\n\n  toolbarModules.forEach(extension => {\n    const { definitions, defaultContext } = extension.module;\n    definitions.forEach(definition => {\n      const context = definition.context || defaultContext;\n\n      if (this.props.activeContexts.includes(context)) {\n        toolbarButtonDefinitions.push(definition);\n      }\n    });\n  });\n\n  const measurementButtons = toolbarButtonDefinitions.filter(function(el) {\n    return el.id === 'Length' || el.id === 'ArrowAnnotate' || el.id === 'Angle';\n  });\n\n  const moreSection = toolbarButtonDefinitions.filter(function(el) {\n    return el.id === 'More';\n  });\n\n  if (moreSection.length !== 0) {\n    const moreSectionButtons = moreSection[0].buttons.filter(function(el) {\n      return (\n        el.id === 'EllipticalRoi' ||\n        el.id === 'RectangleRoi' ||\n        el.id === 'Clear' ||\n        el.id === 'Download' ||\n        el.id === 'Bidirectional'\n      );\n    });\n\n    const otherButtons = moreSection[0].buttons.filter(function(el) {\n      return (\n        el.id !== 'EllipticalRoi' &&\n        el.id !== 'RectangleRoi' &&\n        el.id !== 'Clear' &&\n        el.id !== 'Download' &&\n        el.id !== 'Bidirectional'\n      );\n    });\n\n    const children = measurementButtons.concat(moreSectionButtons);\n\n    const newMeasurementsButton = {\n      id: 'Annotations',\n      label: 'Measurements',\n      icon: 'measure-target',\n      buttons: children,\n    };\n    const newMoreButton = {\n      id: 'MoreTwo',\n      label: 'More',\n      icon: 'ellipse-circle',\n      buttons: otherButtons,\n    };\n    toolbarButtonDefinitions.push(newMeasurementsButton);\n    //toolbarButtonDefinitions.push(newMoreButton);\n\n    measurementButtons.map(button => {\n      const index = toolbarButtonDefinitions.indexOf(button);\n\n      if (index !== -1) {\n        toolbarButtonDefinitions.splice(index, 1);\n      }\n\n      const i = toolbarButtonDefinitions.indexOf(moreSection[0]);\n      if (i !== -1) {\n        toolbarButtonDefinitions.splice(i, 1, newMoreButton);\n      }\n    });\n  }\n\n  return toolbarButtonDefinitions;\n}\n\nfunction _handleBuiltIn(button) {\n  /* TODO: Keep cine button active until its unselected. */\n  const { dialog, t } = this.props;\n  const { dialogId } = this.state;\n  const { id, options } = button;\n\n  if (options.behavior === 'CINE') {\n    if (dialogId) {\n      dialog.dismiss({ id: dialogId });\n      this.setState(state => ({\n        dialogId: null,\n        activeButtons: [\n          ...state.activeButtons.filter(button => button.id !== id),\n        ],\n      }));\n    } else {\n      const spacing = 20;\n      const { x, y } = document\n        .querySelector(`.ViewerMain`)\n        .getBoundingClientRect();\n      const newDialogId = dialog.create({\n        content: ConnectedCineDialog,\n        defaultPosition: {\n          x: x + spacing || 0,\n          y: y + spacing || 0,\n        },\n      });\n      this.setState(state => ({\n        dialogId: newDialogId,\n        activeButtons: [...state.activeButtons, button],\n      }));\n    }\n  }\n\n  if (options.behavior === 'DOWNLOAD_SCREEN_SHOT') {\n    commandsManager.runCommand('showDownloadViewportModal', {\n      title: t('Download High Quality Image'),\n    });\n  }\n}\n\nexport default withTranslation(['Common', 'ViewportDownloadForm'])(\n  withModal(withDialog(withAppContext(ToolbarRow)))\n);\n","import OHIF from '@ohif/core';\nimport { connect } from 'react-redux';\nimport findDisplaySetByUID from './findDisplaySetByUID';\nimport { servicesManager } from './../App.js';\nimport { StudyBrowser } from '../../../ui/src/components/studyBrowser/StudyBrowser';\n\nconst { setActiveViewportSpecificData } = OHIF.redux.actions;\n\nconst mapDispatchToProps = (dispatch, ownProps) => {\n  return {\n    onThumbnailClick: displaySetInstanceUID => {\n      let displaySet = findDisplaySetByUID(\n        ownProps.studyMetadata,\n        displaySetInstanceUID\n      );\n\n      const { LoggerService, UINotificationService } = servicesManager.services;\n\n      if (displaySet.isDerived) {\n        const { Modality } = displaySet;\n        if (Modality === 'SEG' && servicesManager) {\n          const onDisplaySetLoadFailureHandler = error => {\n            LoggerService.error({ error, message: error.message });\n            UINotificationService.show({\n              title: 'DICOM Segmentation Loader',\n              message: error.message,\n              type: 'error',\n              autoClose: true,\n            });\n          };\n\n          const {\n            referencedDisplaySet,\n            activatedLabelmapPromise,\n          } = displaySet.getSourceDisplaySet(\n            ownProps.studyMetadata,\n            true,\n            onDisplaySetLoadFailureHandler\n          );\n          displaySet = referencedDisplaySet;\n\n          activatedLabelmapPromise.then(activatedLabelmapIndex => {\n            const selectionFired = new CustomEvent(\n              'extensiondicomsegmentationsegselected',\n              {\n                detail: { activatedLabelmapIndex: activatedLabelmapIndex },\n              }\n            );\n            document.dispatchEvent(selectionFired);\n          });\n        } else {\n          displaySet = displaySet.getSourceDisplaySet(ownProps.studyMetadata);\n        }\n\n        if (!displaySet) {\n          const error = new Error(\n            `Referenced series for ${Modality} dataset not present.`\n          );\n          const message = `Referenced series for ${Modality} dataset not present.`;\n          LoggerService.error({ error, message });\n          UINotificationService.show({\n            autoClose: false,\n            title: 'Fail to load series',\n            message,\n            type: 'error',\n          });\n        }\n      }\n\n      if (!displaySet) {\n        const error = new Error('Source data not present');\n        const message = 'Source data not present';\n        LoggerService.error({ error, message });\n        UINotificationService.show({\n          autoClose: false,\n          title: 'Fail to load series',\n          message,\n          type: 'error',\n        });\n      }\n\n      if (displaySet.isSOPClassUIDSupported === false) {\n        const error = new Error('Modality not supported');\n        const message = 'Modality not supported';\n        LoggerService.error({ error, message });\n        UINotificationService.show({\n          autoClose: false,\n          title: 'Fail to load series',\n          message,\n          type: 'error',\n        });\n      }\n\n      dispatch(setActiveViewportSpecificData(displaySet));\n    },\n  };\n};\n\nconst ConnectedStudyBrowser = connect(\n  null,\n  mapDispatchToProps\n)(StudyBrowser);\n\nexport default ConnectedStudyBrowser;\n","/**\n * Finds displaySet by UID across all displaySets inside studyMetadata\n * @param {Array} studyMetadata\n * @param {string} displaySetInstanceUID\n */\nexport default function findDisplaySetByUID(\n  studyMetadata,\n  displaySetInstanceUID\n) {\n  if (!Array.isArray(studyMetadata)) return null;\n\n  const allDisplaySets = studyMetadata.reduce((all, current) => {\n    let currentDisplaySet = [];\n    if (current && Array.isArray(current.displaySets)) {\n      currentDisplaySet = current.displaySets;\n    }\n    return all.concat(currentDisplaySet);\n  }, []);\n\n  const bySetInstanceUID = ds =>\n    ds.displaySetInstanceUID === displaySetInstanceUID;\n\n  const displaySet = allDisplaySets.find(bySetInstanceUID);\n  return displaySet || null;\n}\n","import './SidePanel.css';\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport classNames from 'classnames';\n\nconst SidePanel = ({ from, isOpen, children, width }) => {\n  const fromSideClass = from === 'right' ? 'from-right' : 'from-left';\n\n  const styles = width\n    ? {\n        maxWidth: width,\n        marginRight: isOpen ? '0' : Number.parseInt(width) * -1,\n      }\n    : {};\n\n  return (\n    <section\n      style={styles}\n      className={classNames('sidepanel', fromSideClass, {\n        'is-open': isOpen,\n      })}\n    >\n      {children}\n    </section>\n  );\n};\n\nSidePanel.propTypes = {\n  from: PropTypes.string.isRequired,\n  isOpen: PropTypes.bool.isRequired,\n  children: PropTypes.node,\n  width: PropTypes.string,\n};\n\nexport default SidePanel;\n","import { useEffect } from 'react';\nimport { classes, utils } from '@ohif/core';\nimport PropTypes from 'prop-types';\nimport cs from 'cornerstone-core';\n\nimport './StudyPrefetcher.css';\n\nconst StudyPrefetcher = ({ studies, options }) => {\n  useEffect(() => {\n    const studyPrefetcher = classes.StudyPrefetcher.getInstance(\n      studies,\n      options\n    );\n    const studiesMetadata = studies.map(s =>\n      utils.studyMetadataManager.get(s.StudyInstanceUID)\n    );\n    studyPrefetcher.setStudies(studiesMetadata);\n\n    const onNewImage = ({ detail }) => {\n      /**\n       * When images are cached the viewport will load instantly and\n       * the display sets will not be available at this point in time.\n       *\n       * This code add display sets and updates the study prefetcher metadata.\n       */\n\n      if (!detail.image.imageId.includes('nrrdLoader')) {\n        const studiesMetadata = studies.map(s => {\n          const studyMetadata = utils.studyMetadataManager.get(\n            s.StudyInstanceUID\n          );\n          const displaySets = studyMetadata.getDisplaySets();\n          if (!displaySets || displaySets.length < 1) {\n            s.displaySets.forEach(ds => studyMetadata.addDisplaySet(ds));\n          }\n          return studyMetadata;\n        });\n        studyPrefetcher.setStudies(studiesMetadata);\n\n        const study = studyPrefetcher.getStudy(detail.image);\n\n        const series = studyPrefetcher.getSeries(study, detail.image);\n\n        const instance = studyPrefetcher.getInstance(series, detail.image);\n\n        if (study.displaySets && study.displaySets.length > 0) {\n          const {\n            displaySetInstanceUID,\n          } = studyPrefetcher.getDisplaySetBySOPInstanceUID(\n            study.displaySets,\n            instance\n          );\n          studyPrefetcher.prefetch(detail.element, displaySetInstanceUID);\n        }\n      }\n    };\n\n    const onElementEnabled = ({ detail }) => {\n      detail.element.addEventListener(cs.EVENTS.NEW_IMAGE, onNewImage);\n    };\n\n    cs.events.addEventListener(cs.EVENTS.ELEMENT_ENABLED, onElementEnabled);\n\n    return () => {\n      cs.events.removeEventListener(\n        cs.EVENTS.ELEMENT_ENABLED,\n        onElementEnabled\n      );\n      studyPrefetcher.destroy();\n    };\n  }, [options, studies]);\n\n  return null;\n};\n\nStudyPrefetcher.propTypes = {\n  studies: PropTypes.array.isRequired,\n  options: PropTypes.shape({\n    enabled: PropTypes.bool,\n    order: PropTypes.string,\n    displaySetCount: PropTypes.number,\n    preventCache: PropTypes.bool,\n    prefetchDisplaySetsTimeout: PropTypes.number,\n    includeActiveDisplaySet: PropTypes.bool,\n  }),\n};\n\nStudyPrefetcher.defaultProps = {\n  options: {\n    order: 'closest',\n    displaySetCount: 1,\n    preventCache: false,\n    prefetchDisplaySetsTimeout: 300,\n    includeActiveDisplaySet: false,\n  },\n};\n\nexport default StudyPrefetcher;\n","import { useEffect } from 'react';\nimport OHIF from '@ohif/core';\n\nconst { StudyLoadingListener } = OHIF.classes;\n\nconst StudyLoadingMonitor = ({ studies }) => {\n  useEffect(() => {\n    const studyLoadingListener = StudyLoadingListener.getInstance();\n\n    if (studies && studies.length > 0) {\n      studyLoadingListener.clear();\n      studyLoadingListener.addStudies(studies);\n    }\n\n    return () => {\n      studyLoadingListener.clear();\n    };\n  }, [studies]);\n\n  return null;\n};\n\nexport default StudyLoadingMonitor;\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport classNames from 'classnames';\nimport OHIF, { MODULE_TYPES, DICOMSR } from '@ohif/core';\nimport { withDialog } from '@ohif/ui';\nimport moment from 'moment';\nimport ToolbarRow from './ToolbarRow.js';\nimport ConnectedStudyBrowser from './ConnectedStudyBrowser.js';\nimport ConnectedViewerMain from './ConnectedViewerMain.js';\nimport SidePanel from './../components/SidePanel.js';\nimport ErrorBoundaryDialog from './../components/ErrorBoundaryDialog';\nimport { extensionManager, servicesManager } from './../App.js';\nimport { ReconstructionIssues } from './../../../core/src/enums.js';\nimport AppContext from '../context/AppContext';\nimport './Viewer.css';\nimport StudyPrefetcher from '../components/StudyPrefetcher.js';\nimport StudyLoadingMonitor from '../components/StudyLoadingMonitor';\n\nconst { studyMetadataManager } = OHIF.utils;\n\nclass Viewer extends Component {\n  static propTypes = {\n    studies: PropTypes.arrayOf(\n      PropTypes.shape({\n        StudyInstanceUID: PropTypes.string.isRequired,\n        StudyDate: PropTypes.string,\n        PatientID: PropTypes.string,\n        displaySets: PropTypes.arrayOf(\n          PropTypes.shape({\n            displaySetInstanceUID: PropTypes.string.isRequired,\n            SeriesDescription: PropTypes.string,\n            SeriesNumber: PropTypes.number,\n            InstanceNumber: PropTypes.number,\n            numImageFrames: PropTypes.number,\n            Modality: PropTypes.string.isRequired,\n            images: PropTypes.arrayOf(\n              PropTypes.shape({\n                getImageId: PropTypes.func.isRequired,\n              })\n            ),\n          })\n        ),\n      })\n    ),\n    studyInstanceUIDs: PropTypes.array,\n    activeServer: PropTypes.shape({\n      type: PropTypes.string,\n      wadoRoot: PropTypes.string,\n    }),\n    onTimepointsUpdated: PropTypes.func,\n    onMeasurementsUpdated: PropTypes.func,\n    // window.store.getState().viewports.viewportSpecificData\n    viewports: PropTypes.object.isRequired,\n    // window.store.getState().viewports.activeViewportIndex\n    activeViewportIndex: PropTypes.number.isRequired,\n    isStudyLoaded: PropTypes.bool,\n    reload: PropTypes.bool,\n    dialog: PropTypes.object,\n    isNrrdImage: PropTypes.bool,\n  };\n\n  constructor(props) {\n    super(props);\n\n    const { activeServer } = this.props;\n    const server = Object.assign({}, activeServer);\n\n    const external = { servicesManager };\n\n    OHIF.measurements.MeasurementApi.setConfiguration({\n      dataExchange: {\n        retrieve: server => DICOMSR.retrieveMeasurements(server, external),\n        store: DICOMSR.storeMeasurements,\n      },\n      server,\n    });\n\n    OHIF.measurements.TimepointApi.setConfiguration({\n      dataExchange: {\n        retrieve: this.retrieveTimepoints,\n        store: this.storeTimepoints,\n        remove: this.removeTimepoint,\n        update: this.updateTimepoint,\n        disassociate: this.disassociateStudy,\n      },\n    });\n\n    this._getActiveViewport = this._getActiveViewport.bind(this);\n  }\n\n  state = {\n    isLeftSidePanelOpen: true,\n    isRightSidePanelOpen: false,\n    selectedRightSidePanel: '',\n    selectedLeftSidePanel: 'studies',\n    thumbnails: [],\n    openMeasurements: false,\n  };\n\n  componentWillUnmount() {\n    if (this.props.dialog) {\n      this.props.dialog.dismissAll();\n    }\n\n    document.removeEventListener(\n      'segmentationLoadingError',\n      this._updateThumbnails\n    );\n  }\n\n  retrieveTimepoints = filter => {\n    OHIF.log.info('retrieveTimepoints');\n\n    // Get the earliest and latest study date\n    let earliestDate = new Date().toISOString();\n    let latestDate = new Date().toISOString();\n    if (this.props.studies) {\n      latestDate = new Date('1000-01-01').toISOString();\n      this.props.studies.forEach(study => {\n        const StudyDate = moment(study.StudyDate, 'YYYYMMDD').toISOString();\n        if (StudyDate < earliestDate) {\n          earliestDate = StudyDate;\n        }\n        if (StudyDate > latestDate) {\n          latestDate = StudyDate;\n        }\n      });\n    }\n\n    // Return a generic timepoint\n    return Promise.resolve([\n      {\n        timepointType: 'baseline',\n        timepointId: 'TimepointId',\n        studyInstanceUIDs: this.props.studyInstanceUIDs,\n        PatientID: filter.PatientID,\n        earliestDate,\n        latestDate,\n        isLocked: false,\n      },\n    ]);\n  };\n\n  storeTimepoints = timepointData => {\n    OHIF.log.info('storeTimepoints');\n    return Promise.resolve();\n  };\n\n  updateTimepoint = (timepointData, query) => {\n    OHIF.log.info('updateTimepoint');\n    return Promise.resolve();\n  };\n\n  removeTimepoint = timepointId => {\n    OHIF.log.info('removeTimepoint');\n    return Promise.resolve();\n  };\n\n  disassociateStudy = (timepointIds, StudyInstanceUID) => {\n    OHIF.log.info('disassociateStudy');\n    return Promise.resolve();\n  };\n\n  onTimepointsUpdated = timepoints => {\n    if (this.props.onTimepointsUpdated) {\n      this.props.onTimepointsUpdated(timepoints);\n    }\n  };\n\n  onMeasurementsUpdated = measurements => {\n    if (this.props.onMeasurementsUpdated) {\n      this.props.onMeasurementsUpdated(measurements);\n    }\n  };\n\n  componentDidMount() {\n    const { studies, isStudyLoaded, reload, isNrrdImage } = this.props;\n    if (reload) {\n      window.location.reload(false);\n    }\n\n    if (isNrrdImage === true) {\n      this.setState({\n        thumbnails: [],\n      });\n    } else {\n      const { TimepointApi, MeasurementApi } = OHIF.measurements;\n      const currentTimepointId = 'TimepointId';\n\n      const timepointApi = new TimepointApi(currentTimepointId, {\n        onTimepointsUpdated: this.onTimepointsUpdated,\n      });\n\n      const measurementApi = new MeasurementApi(timepointApi, {\n        onMeasurementsUpdated: this.onMeasurementsUpdated,\n      });\n\n      this.currentTimepointId = currentTimepointId;\n      this.timepointApi = timepointApi;\n      this.measurementApi = measurementApi;\n\n      if (studies) {\n        const PatientID = studies[0] && studies[0].PatientID;\n\n        timepointApi.retrieveTimepoints({ PatientID });\n        if (isStudyLoaded) {\n          this.measurementApi.retrieveMeasurements(PatientID, [\n            currentTimepointId,\n          ]);\n        }\n\n        const activeViewport = this.props.viewports[\n          this.props.activeViewportIndex\n        ];\n        const activeDisplaySetInstanceUID = activeViewport\n          ? activeViewport.displaySetInstanceUID\n          : undefined;\n        this.setState({\n          thumbnails: _mapStudiesToThumbnails(\n            studies,\n            activeDisplaySetInstanceUID\n          ),\n        });\n      }\n      document.addEventListener(\n        'segmentationLoadingError',\n        this._updateThumbnails.bind(this),\n        false\n      );\n    }\n  }\n\n  componentDidUpdate(prevProps) {\n    const {\n      studies,\n      isStudyLoaded,\n      activeViewportIndex,\n      viewports,\n      reload,\n    } = this.props;\n    if (reload) {\n      window.location.reload(false);\n    }\n\n    const activeViewport = viewports[activeViewportIndex];\n    const activeDisplaySetInstanceUID = activeViewport\n      ? activeViewport.displaySetInstanceUID\n      : undefined;\n\n    const prevActiveViewport =\n      prevProps.viewports[prevProps.activeViewportIndex];\n    const prevActiveDisplaySetInstanceUID = prevActiveViewport\n      ? prevActiveViewport.displaySetInstanceUID\n      : undefined;\n\n    if (\n      studies !== prevProps.studies ||\n      activeViewportIndex !== prevProps.activeViewportIndex ||\n      activeDisplaySetInstanceUID !== prevActiveDisplaySetInstanceUID\n    ) {\n      this.setState({\n        thumbnails: _mapStudiesToThumbnails(\n          studies,\n          activeDisplaySetInstanceUID\n        ),\n        activeDisplaySetInstanceUID,\n      });\n    }\n    if (isStudyLoaded && isStudyLoaded !== prevProps.isStudyLoaded) {\n      const PatientID = studies[0] && studies[0].PatientID;\n      const { currentTimepointId } = this;\n\n      this.timepointApi.retrieveTimepoints({ PatientID });\n      this.measurementApi.retrieveMeasurements(PatientID, [currentTimepointId]);\n    }\n  }\n\n  _updateThumbnails() {\n    const { studies, activeViewportIndex, viewports } = this.props;\n\n    const activeViewport = viewports[activeViewportIndex];\n    const activeDisplaySetInstanceUID = activeViewport\n      ? activeViewport.displaySetInstanceUID\n      : undefined;\n\n    this.setState({\n      thumbnails: _mapStudiesToThumbnails(studies, activeDisplaySetInstanceUID),\n      activeDisplaySetInstanceUID,\n    });\n  }\n\n  _getActiveViewport() {\n    return this.props.viewports[this.props.activeViewportIndex];\n  }\n\n  _openMeasurementsPanel() {\n    let VisiblePanelRight = null;\n    const panelExtensions = extensionManager.modules[MODULE_TYPES.PANEL];\n\n    panelExtensions.forEach(panelExt => {\n      panelExt.module.components.forEach(comp => {\n        if (comp.id === 'measurement-panel') {\n          VisiblePanelRight = comp.component;\n        }\n      });\n    });\n\n    return VisiblePanelRight;\n  }\n\n  render() {\n    let VisiblePanelLeft;\n    let VisiblePanelRight = null;\n    if (\n      this.state.openMeasurements &&\n      this.state.selectedRightSidePanel === 'measurement-panel'\n    ) {\n      VisiblePanelRight = this._openMeasurementsPanel();\n    } else {\n      const panelExtensions = extensionManager.modules[MODULE_TYPES.PANEL];\n\n      panelExtensions.forEach(panelExt => {\n        panelExt.module.components.forEach(comp => {\n          if (comp.id === this.state.selectedRightSidePanel) {\n            VisiblePanelRight = comp.component;\n          } else if (comp.id === this.state.selectedLeftSidePanel) {\n            VisiblePanelLeft = comp.component;\n          }\n        });\n      });\n    }\n    return (\n      <>\n        {/* HEADER */}\n\n        {/* TOOLBAR */}\n        <ErrorBoundaryDialog context=\"ToolbarRow\">\n          <ToolbarRow\n            activeViewport={\n              this.props.viewports[this.props.activeViewportIndex]\n            }\n            isLeftSidePanelOpen={this.state.isLeftSidePanelOpen}\n            isRightSidePanelOpen={this.state.isRightSidePanelOpen}\n            selectedLeftSidePanel={\n              this.state.isLeftSidePanelOpen\n                ? this.state.selectedLeftSidePanel\n                : ''\n            }\n            selectedRightSidePanel={\n              this.state.isRightSidePanelOpen\n                ? this.state.selectedRightSidePanel\n                : ''\n            }\n            openMeasurementsPanel={() =>\n              this.setState({\n                openMeasurements: true,\n                isRightSidePanelOpen: true,\n                selectedRightSidePanel: 'measurement-panel',\n              })\n            }\n            openSegmentationPanel={() =>\n              this.setState({\n                isRightSidePanelOpen: true,\n                selectedRightSidePanel: 'segmentation-panel',\n              })\n            }\n            handleSidePanelChange={(side, selectedPanel) => {\n              const sideClicked = side && side[0].toUpperCase() + side.slice(1);\n              const openKey = `is${sideClicked}SidePanelOpen`;\n              const selectedKey = `selected${sideClicked}SidePanel`;\n              const updatedState = Object.assign({}, this.state);\n\n              const isOpen = updatedState[openKey];\n              const prevSelectedPanel = updatedState[selectedKey];\n              // RoundedButtonGroup returns `null` if selected button is clicked\n              const isSameSelectedPanel =\n                prevSelectedPanel === selectedPanel || selectedPanel === null;\n\n              updatedState[selectedKey] = selectedPanel || prevSelectedPanel;\n\n              const isClosedOrShouldClose = !isOpen || isSameSelectedPanel;\n              if (isClosedOrShouldClose) {\n                updatedState[openKey] = !updatedState[openKey];\n              }\n\n              this.setState(updatedState);\n            }}\n            studies={this.props.studies}\n          />\n        </ErrorBoundaryDialog>\n        <AppContext.Consumer>\n          {() => <StudyLoadingMonitor studies={this.props.studies} />}\n        </AppContext.Consumer>\n        {/* VIEWPORTS + SIDEPANELS */}\n        <div className=\"FlexboxLayout\">\n          {/* LEFT */}\n          <ErrorBoundaryDialog context=\"LeftSidePanel\">\n            <SidePanel from=\"left\" isOpen={this.state.isLeftSidePanelOpen}>\n              {VisiblePanelLeft ? (\n                <VisiblePanelLeft\n                  viewports={this.props.viewports}\n                  studies={this.props.studies}\n                  activeIndex={this.props.activeViewportIndex}\n                />\n              ) : (\n                <AppContext.Consumer>\n                  {appContext => {\n                    const { appConfig } = appContext;\n                    const { studyPrefetcher } = appConfig;\n                    const { thumbnails } = this.state;\n                    return (\n                      <ConnectedStudyBrowser\n                        studies={thumbnails}\n                        studyMetadata={this.props.studies}\n                        showThumbnailProgressBar={\n                          studyPrefetcher &&\n                          studyPrefetcher.enabled &&\n                          studyPrefetcher.displayProgress\n                        }\n                      />\n                    );\n                  }}\n                </AppContext.Consumer>\n              )}\n            </SidePanel>\n          </ErrorBoundaryDialog>\n\n          {/* MAIN */}\n          <div className={classNames('main-content')}>\n            <ErrorBoundaryDialog context=\"ViewerMain\">\n              <AppContext.Consumer>\n                {appContext => {\n                  const { appConfig } = appContext;\n                  const { studyPrefetcher } = appConfig;\n                  const { studies } = this.props;\n                  return (\n                    studyPrefetcher &&\n                    studyPrefetcher.enabled && (\n                      <StudyPrefetcher\n                        studies={studies}\n                        options={studyPrefetcher}\n                      />\n                    )\n                  );\n                }}\n              </AppContext.Consumer>\n              <ConnectedViewerMain\n                studies={this.props.studies}\n                isStudyLoaded={this.props.isStudyLoaded}\n              />\n            </ErrorBoundaryDialog>\n          </div>\n\n          {/* RIGHT */}\n          <ErrorBoundaryDialog context=\"RightSidePanel\">\n            <SidePanel from=\"right\" isOpen={this.state.isRightSidePanelOpen}>\n              {VisiblePanelRight && (\n                <VisiblePanelRight\n                  isOpen={this.state.isRightSidePanelOpen}\n                  viewports={this.props.viewports}\n                  studies={this.props.studies}\n                  activeIndex={this.props.activeViewportIndex}\n                  activeViewport={\n                    this.props.viewports[this.props.activeViewportIndex]\n                  }\n                  getActiveViewport={this._getActiveViewport}\n                />\n              )}\n            </SidePanel>\n          </ErrorBoundaryDialog>\n        </div>\n      </>\n    );\n  }\n}\n\nexport default withDialog(Viewer);\n\n/**\n * Async function to check if the displaySet has any derived one\n *\n * @param {*object} displaySet\n * @param {*object} study\n * @returns {bool}\n */\nconst _checkForDerivedDisplaySets = async function(displaySet, study) {\n  let derivedDisplaySetsNumber = 0;\n  if (\n    displaySet.Modality &&\n    !['SEG', 'SR', 'RTSTRUCT', 'RTDOSE'].includes(displaySet.Modality)\n  ) {\n    const studyMetadata = studyMetadataManager.get(study.StudyInstanceUID);\n\n    const derivedDisplaySets = studyMetadata.getDerivedDatasets({\n      referencedSeriesInstanceUID: displaySet.SeriesInstanceUID,\n    });\n\n    derivedDisplaySetsNumber = derivedDisplaySets.length;\n  }\n\n  return derivedDisplaySetsNumber > 0;\n};\n\n/**\n * Async function to check if there are any inconsistences in the series.\n *\n * For segmentation returns any error during loading.\n *\n * For reconstructable 3D volume:\n * 1) Is series multiframe?\n * 2) Do the frames have different dimensions/number of components/orientations?\n * 3) Has the series any missing frames or irregular spacing?\n * 4) Is the series 4D?\n *\n * If not reconstructable, MPR is disabled.\n * The actual computations are done in isDisplaySetReconstructable.\n *\n * @param {*object} displaySet\n * @returns {[string]} an array of strings containing the warnings\n */\nconst _checkForSeriesInconsistencesWarnings = async function(displaySet) {\n  if (displaySet.inconsistencyWarnings) {\n    // warnings already checked and cached in displaySet\n    return displaySet.inconsistencyWarnings;\n  }\n\n  const inconsistencyWarnings = [];\n\n  if (displaySet.Modality !== 'SEG') {\n    if (\n      displaySet.reconstructionIssues &&\n      displaySet.reconstructionIssues.length !== 0\n    ) {\n      displaySet.reconstructionIssues.forEach(warning => {\n        switch (warning) {\n          case ReconstructionIssues.DATASET_4D:\n            inconsistencyWarnings.push('The dataset is 4D.');\n            break;\n          case ReconstructionIssues.VARYING_IMAGESDIMENSIONS:\n            inconsistencyWarnings.push(\n              'The dataset frames have different dimensions (rows, columns).'\n            );\n            break;\n          case ReconstructionIssues.VARYING_IMAGESCOMPONENTS:\n            inconsistencyWarnings.push(\n              'The dataset frames have different components (Sample per pixel).'\n            );\n            break;\n          case ReconstructionIssues.VARYING_IMAGESORIENTATION:\n            inconsistencyWarnings.push(\n              'The dataset frames have different orientation.'\n            );\n            break;\n          case ReconstructionIssues.IRREGULAR_SPACING:\n            inconsistencyWarnings.push(\n              'The dataset frames have different pixel spacing.'\n            );\n            break;\n          case ReconstructionIssues.MULTIFFRAMES:\n            inconsistencyWarnings.push('The dataset is a multiframes.');\n            break;\n          default:\n            break;\n        }\n      });\n      inconsistencyWarnings.push(\n        'The datasets is not a reconstructable 3D volume. MPR mode is not available.'\n      );\n    }\n\n    if (\n      displaySet.missingFrames &&\n      (!displaySet.reconstructionIssues ||\n        (displaySet.reconstructionIssues &&\n          !displaySet.reconstructionIssues.find(\n            warn => warn === ReconstructionIssues.DATASET_4D\n          )))\n    ) {\n      inconsistencyWarnings.push(\n        'The datasets is missing frames: ' + displaySet.missingFrames + '.'\n      );\n    }\n\n    if (displaySet.isSOPClassUIDSupported === false) {\n      inconsistencyWarnings.push('The datasets is not supported.');\n    }\n    displaySet.inconsistencyWarnings = inconsistencyWarnings;\n  } else {\n    if (displaySet.loadError) {\n      inconsistencyWarnings.push(displaySet.segLoadErrorMessagge);\n      displaySet.inconsistencyWarnings = inconsistencyWarnings;\n    }\n  }\n\n  return inconsistencyWarnings;\n};\n\n/**\n * Checks if display set is active, i.e. if the series is currently shown\n * in the active viewport.\n *\n * For data display set, this functions checks if the active\n * display set instance uid in the current active viewport is the same of the\n * thumbnail one.\n *\n * For derived modalities (e.g., SEG and RTSTRUCT), the function gets the\n * reference display set and then checks the reference uid with the active\n * display set instance uid.\n *\n * @param {displaySet} displaySet\n * @param {Study[]} studies\n * @param {string} activeDisplaySetInstanceUID\n * @returns {boolean} is active.\n */\nconst _isDisplaySetActive = function(\n  displaySet,\n  studies,\n  activeDisplaySetInstanceUID\n) {\n  let active = false;\n\n  const { displaySetInstanceUID } = displaySet;\n\n  // TO DO: in the future, we could possibly support new modalities\n  // we should have a list of all modalities here, instead of having hard coded checks\n  if (\n    displaySet.Modality !== 'SEG' &&\n    displaySet.Modality !== 'RTSTRUCT' &&\n    displaySet.Modality !== 'RTDOSE'\n  ) {\n    active = activeDisplaySetInstanceUID === displaySetInstanceUID;\n  } else if (displaySet.getSourceDisplaySet) {\n    if (displaySet.Modality === 'SEG') {\n      const { referencedDisplaySet } = displaySet.getSourceDisplaySet(\n        studies,\n        false\n      );\n      active = referencedDisplaySet\n        ? activeDisplaySetInstanceUID ===\n          referencedDisplaySet.displaySetInstanceUID\n        : false;\n    } else {\n      const referencedDisplaySet = displaySet.getSourceDisplaySet(\n        studies,\n        false\n      );\n      active = referencedDisplaySet\n        ? activeDisplaySetInstanceUID ===\n          referencedDisplaySet.displaySetInstanceUID\n        : false;\n    }\n  }\n\n  return active;\n};\n\n/**\n * What types are these? Why do we have \"mapping\" dropped in here instead of in\n * a mapping layer?\n *\n * TODO[react]:\n * - Add showStackLoadingProgressBar option\n *\n * @param {Study[]} studies\n * @param {string} activeDisplaySetInstanceUID\n */\nconst _mapStudiesToThumbnails = function(studies, activeDisplaySetInstanceUID) {\n  return studies.map(study => {\n    const { StudyInstanceUID } = study;\n    const thumbnails = [];\n    study.displaySets.map(displaySet => {\n      if (displaySet.Modality !== 'SR' && displaySet.Modality !== 'SEG') {\n        //console.log(displaySet);\n        const {\n          displaySetInstanceUID,\n          SeriesDescription,\n          numImageFrames,\n          SeriesNumber,\n        } = displaySet;\n\n        let imageId;\n        let altImageText;\n\n        if (displaySet.images && displaySet.images.length) {\n          const imageIndex = Math.floor(displaySet.images.length / 2);\n          imageId = displaySet.images[imageIndex].getImageId();\n        }\n        const hasWarnings = _checkForSeriesInconsistencesWarnings(displaySet);\n\n        const hasDerivedDisplaySets = _checkForDerivedDisplaySets(\n          displaySet,\n          study\n        );\n\n        thumbnails.push({\n          active: _isDisplaySetActive(\n            displaySet,\n            studies,\n            activeDisplaySetInstanceUID\n          ),\n          imageId,\n          altImageText,\n          displaySetInstanceUID,\n          SeriesDescription,\n          numImageFrames,\n          SeriesNumber,\n          hasWarnings,\n          hasDerivedDisplaySets,\n        });\n      }\n    });\n\n    return {\n      StudyInstanceUID,\n      thumbnails,\n    };\n  });\n};\n","import { connect } from 'react-redux';\nimport Viewer from './Viewer.js';\nimport OHIF from '@ohif/core';\n\nconst { setTimepoints, setMeasurements } = OHIF.redux.actions;\n\nconst getActiveServer = servers => {\n  const isActive = a => a.active === true;\n  return servers.servers.find(isActive);\n};\n\nconst mapStateToProps = state => {\n  const { viewports, servers } = state;\n  return {\n    viewports: viewports.viewportSpecificData,\n    activeViewportIndex: viewports.activeViewportIndex,\n    activeServer: getActiveServer(servers),\n  };\n};\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    onTimepointsUpdated: timepoints => {\n      dispatch(setTimepoints(timepoints));\n    },\n    onMeasurementsUpdated: measurements => {\n      dispatch(setMeasurements(measurements));\n    },\n  };\n};\n\nconst ConnectedViewer = connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(Viewer);\n\nexport default ConnectedViewer;\n","import React from 'react';\nimport { useDrop } from 'react-dnd';\nimport PropTypes from 'prop-types';\nimport classNames from 'classnames';\nimport './ViewportPane.css';\n\nconst ViewportPane = function (props) {\n  const { children, onDrop, viewportIndex, className: propClassName } = props;\n  const [{ hovered, highlighted }, drop] = useDrop({\n    accept: 'thumbnail',\n    drop: (droppedItem, monitor) => {\n      const canDrop = monitor.canDrop();\n      const isOver = monitor.isOver();\n\n      if (canDrop && isOver && onDrop) {\n        const { StudyInstanceUID, displaySetInstanceUID } = droppedItem;\n\n        onDrop({ viewportIndex, StudyInstanceUID, displaySetInstanceUID });\n      }\n    },\n    // Monitor, and collect props.\n    // Returned as values by `useDrop`\n    collect: monitor => ({\n      highlighted: monitor.canDrop(),\n      hovered: monitor.isOver(),\n    }),\n  });\n\n  return (\n    <div\n      className={classNames(\n        'viewport-drop-target',\n        { hovered: hovered },\n        { highlighted: highlighted },\n        propClassName\n      )}\n      ref={drop}\n      data-cy={`viewport-container-${viewportIndex}`}\n    >\n      {children}\n    </div>\n  );\n};\n\nViewportPane.propTypes = {\n  children: PropTypes.node.isRequired,\n  viewportIndex: PropTypes.number.isRequired,\n  onDrop: PropTypes.func.isRequired,\n  className: PropTypes.string,\n};\n\nexport default ViewportPane;\n","import './ViewportGrid.css';\nimport React, { useEffect } from 'react';\nimport PropTypes from 'prop-types';\nimport classNames from 'classnames';\nimport { utils } from '@ohif/core';\nimport { useSnackbarContext, useLogger } from '@ohif/ui';\nimport ViewportPane from './ViewportPane.js';\nimport DefaultViewport from './DefaultViewport.js';\nimport EmptyViewport from './EmptyViewport.js';\n\nconst { loadAndCacheDerivedDisplaySets } = utils;\n\nconst ViewportGrid = function(props) {\n  const {\n    activeViewportIndex,\n    availablePlugins,\n    defaultPlugin: defaultPluginName,\n    layout,\n    numRows,\n    numColumns,\n    setViewportData,\n    studies,\n    viewportData,\n    children,\n    isStudyLoaded,\n  } = props;\n\n  const rowSize = 100 / numRows;\n  const colSize = 100 / numColumns;\n\n  // http://grid.malven.co/\n  if (!viewportData || !viewportData.length) {\n    return null;\n  }\n\n  const snackbar = useSnackbarContext();\n  const logger = useLogger();\n\n  useEffect(() => {\n    if (isStudyLoaded) {\n      viewportData.forEach(displaySet => {\n        loadAndCacheDerivedDisplaySets(displaySet, studies, logger, snackbar);\n      });\n    }\n  }, [studies, viewportData, isStudyLoaded, snackbar, logger]);\n\n  const getViewportPanes = () =>\n    layout.viewports.map((layout, viewportIndex) => {\n      const displaySet = viewportData[viewportIndex];\n\n      if (!displaySet) {\n        return null;\n      }\n\n      const data = {\n        displaySet,\n        studies,\n      };\n\n      // JAMES TODO:\n\n      // Use whichever plugin is currently in use in the panel\n      // unless nothing is specified. If nothing is specified\n      // and the display set has a plugin specified, use that.\n      //\n      // TODO: Change this logic to:\n      // - Plugins define how capable they are of displaying a SopClass\n      // - When updating a panel, ensure that the currently enabled plugin\n      // in the viewport is capable of rendering this display set. If not\n      // then use the most capable available plugin\n\n      const pluginName =\n        !layout.plugin && displaySet && displaySet.plugin\n          ? displaySet.plugin\n          : layout.plugin;\n\n      const ViewportComponent = _getViewportComponent(\n        data, // Why do we pass this as `ViewportData`, when that's not really what it is?\n        viewportIndex,\n        children,\n        availablePlugins,\n        pluginName,\n        defaultPluginName\n      );\n\n      return (\n        <ViewportPane\n          onDrop={setViewportData}\n          viewportIndex={viewportIndex} // Needed by `setViewportData`\n          className={classNames('viewport-container', {\n            active: activeViewportIndex === viewportIndex,\n          })}\n          key={viewportIndex}\n        >\n          {ViewportComponent}\n        </ViewportPane>\n      );\n    });\n\n  const ViewportPanes = React.useMemo(getViewportPanes, [\n    layout,\n    viewportData,\n    studies,\n    children,\n    availablePlugins,\n    defaultPluginName,\n    setViewportData,\n    activeViewportIndex,\n  ]);\n\n  return (\n    <div\n      data-cy=\"viewprt-grid\"\n      style={{\n        display: 'grid',\n        gridTemplateRows: `repeat(${numRows}, ${rowSize}%)`,\n        gridTemplateColumns: `repeat(${numColumns}, ${colSize}%)`,\n        height: '100%',\n        width: '100%',\n      }}\n    >\n      {ViewportPanes}\n    </div>\n  );\n};\n\nViewportGrid.propTypes = {\n  viewportData: PropTypes.array.isRequired,\n  supportsDrop: PropTypes.bool.isRequired,\n  activeViewportIndex: PropTypes.number.isRequired,\n  layout: PropTypes.object.isRequired,\n  availablePlugins: PropTypes.object.isRequired,\n  setViewportData: PropTypes.func.isRequired,\n  studies: PropTypes.array,\n  children: PropTypes.node,\n  defaultPlugin: PropTypes.string,\n  numRows: PropTypes.number.isRequired,\n  numColumns: PropTypes.number.isRequired,\n};\n\nViewportGrid.defaultProps = {\n  viewportData: [],\n  numRows: 1,\n  numColumns: 1,\n  layout: {\n    viewports: [{}],\n  },\n  activeViewportIndex: 0,\n  supportsDrop: true,\n  availablePlugins: {\n    DefaultViewport,\n  },\n  defaultPlugin: 'defaultViewportPlugin',\n};\n\n/**\n *\n *\n * @param {*} plugin\n * @param {*} viewportData\n * @param {*} viewportIndex\n * @param {*} children\n * @returns\n */\nfunction _getViewportComponent(\n  viewportData,\n  viewportIndex,\n  children,\n  availablePlugins,\n  pluginName,\n  defaultPluginName\n) {\n  if (viewportData.displaySet) {\n    pluginName = pluginName || defaultPluginName;\n    const ViewportComponent = availablePlugins[pluginName];\n\n    if (!ViewportComponent) {\n      throw new Error(\n        `No Viewport Component available for name ${pluginName}.\n         Available plugins: ${JSON.stringify(availablePlugins)}`\n      );\n    }\n\n    return (\n      <ViewportComponent\n        viewportData={viewportData}\n        viewportIndex={viewportIndex}\n        children={[children]}\n      />\n    );\n  }\n\n  return <EmptyViewport />;\n}\n\nexport default ViewportGrid;\n","/**\n *\n *\n * @export\n * @param {*} props\n * @returns\n */\nexport default function DefaultViewport(props) {\n  return <div>{JSON.stringify(props)}</div>;\n}\n","import ViewportGrid from './ViewportGrid.js';\nimport { MODULE_TYPES } from '@ohif/core';\nimport { connect } from 'react-redux';\nimport { extensionManager } from './../../App.js';\nimport memoize from 'lodash/memoize';\n\nconst getAvailableViewportModules = memoize(viewportModules => {\n  const availableViewportModules = {};\n  viewportModules.forEach(moduleDefinition => {\n    availableViewportModules[moduleDefinition.extensionId] =\n      moduleDefinition.module;\n  });\n  return availableViewportModules;\n});\n\nconst mapStateToProps = state => {\n  const viewportModules = extensionManager.modules[MODULE_TYPES.VIEWPORT];\n  const availableViewportModules = getAvailableViewportModules(viewportModules);\n\n  // TODO: Use something like state.plugins.defaultPlugin[MODULE_TYPES.VIEWPORT]\n  let defaultPlugin;\n  if (viewportModules.length) {\n    defaultPlugin = viewportModules[0].extensionId;\n  }\n\n  const { numRows, numColumns, layout, activeViewportIndex } = state.viewports;\n\n  return {\n    numRows,\n    numColumns,\n    layout,\n    activeViewportIndex,\n    // TODO: rename `availableViewportModules`\n    availablePlugins: availableViewportModules,\n    // TODO: rename `defaultViewportModule`\n    defaultPlugin,\n  };\n};\n\nconst ConnectedViewportGrid = connect(\n  mapStateToProps,\n  null\n)(ViewportGrid);\n\nexport default ConnectedViewportGrid;\n","import './ViewerMain.css';\nimport { servicesManager } from './../App.js';\nimport { Component } from 'react';\nimport { ConnectedViewportGrid } from './../components/ViewportGrid/index.js';\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport memoize from 'lodash/memoize';\nimport _values from 'lodash/values';\nconst larvitar = require('D:/tese/Bia_final/frontend_bia/node_modules/larvitar/index.js');\n\nvar values = memoize(_values);\n\nclass ViewerMain extends Component {\n  static propTypes = {\n    activeViewportIndex: PropTypes.number.isRequired,\n    studies: PropTypes.array,\n    viewportSpecificData: PropTypes.object.isRequired,\n    layout: PropTypes.object.isRequired,\n    setViewportSpecificData: PropTypes.func.isRequired,\n    clearViewportSpecificData: PropTypes.func.isRequired,\n    isStudyLoaded: PropTypes.bool,\n  };\n\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      displaySets: [],\n    };\n    larvitar.registerNRRDImageLoader();\n  }\n\n  getDisplaySets(studies) {\n    const displaySets = [];\n    studies.forEach(study => {\n      study.displaySets.forEach(dSet => {\n        if (!dSet.plugin) {\n          dSet.plugin = 'cornerstone';\n        }\n        displaySets.push(dSet);\n      });\n    });\n\n    return displaySets;\n  }\n\n  findDisplaySet(studies, StudyInstanceUID, displaySetInstanceUID) {\n    const study = studies.find(study => {\n      return study.StudyInstanceUID === StudyInstanceUID;\n    });\n\n    if (!study) {\n      return;\n    }\n\n    return study.displaySets.find(displaySet => {\n      return displaySet.displaySetInstanceUID === displaySetInstanceUID;\n    });\n  }\n\n  componentDidMount() {\n    // Add beforeUnload event handler to check for unsaved changes\n    //window.addEventListener('beforeunload', unloadHandlers.beforeUnload);\n\n    // Get all the display sets for the viewer studies\n    if (this.props.studies) {\n      const displaySets = this.getDisplaySets(this.props.studies);\n\n      this.setState({ displaySets }, this.fillEmptyViewportPanes);\n    }\n  }\n\n  componentDidUpdate(prevProps) {\n    const prevViewportAmount = prevProps.layout.viewports.length;\n    const viewportAmount = this.props.layout.viewports.length;\n    const isVtk = this.props.layout.viewports.some(vp => !!vp.vtk);\n\n    if (\n      this.props.studies !== prevProps.studies ||\n      (viewportAmount !== prevViewportAmount && !isVtk)\n    ) {\n      const displaySets = this.getDisplaySets(this.props.studies);\n      this.setState({ displaySets }, this.fillEmptyViewportPanes);\n    }\n  }\n\n  fillEmptyViewportPanes = () => {\n    // TODO: Here is the entry point for filling viewports on load.\n    const dirtyViewportPanes = [];\n    const { layout, viewportSpecificData } = this.props;\n    const { displaySets } = this.state;\n\n    if (!displaySets || !displaySets.length) {\n      return;\n    }\n\n    for (let i = 0; i < layout.viewports.length; i++) {\n      const viewportPane = viewportSpecificData[i];\n      const isNonEmptyViewport =\n        viewportPane &&\n        viewportPane.StudyInstanceUID &&\n        viewportPane.displaySetInstanceUID;\n\n      if (isNonEmptyViewport) {\n        dirtyViewportPanes.push({\n          StudyInstanceUID: viewportPane.StudyInstanceUID,\n          displaySetInstanceUID: viewportPane.displaySetInstanceUID,\n        });\n\n        continue;\n      }\n\n      const foundDisplaySet =\n        displaySets.find(\n          ds =>\n            !dirtyViewportPanes.some(\n              v => v.displaySetInstanceUID === ds.displaySetInstanceUID\n            )\n        ) || displaySets[displaySets.length - 1];\n\n      dirtyViewportPanes.push(foundDisplaySet);\n    }\n\n    dirtyViewportPanes.forEach((vp, i) => {\n      if (vp && vp.StudyInstanceUID) {\n        this.setViewportData({\n          viewportIndex: i,\n          StudyInstanceUID: vp.StudyInstanceUID,\n          displaySetInstanceUID: vp.displaySetInstanceUID,\n        });\n      }\n    });\n  };\n\n  setViewportData = ({\n    viewportIndex,\n    StudyInstanceUID,\n    displaySetInstanceUID,\n  }) => {\n    let displaySet = this.findDisplaySet(\n      this.props.studies,\n      StudyInstanceUID,\n      displaySetInstanceUID\n    );\n\n    const { LoggerService, UINotificationService } = servicesManager.services;\n\n    if (displaySet.isDerived) {\n      const { Modality } = displaySet;\n      if (Modality === 'SEG' && servicesManager) {\n        const onDisplaySetLoadFailureHandler = error => {\n          LoggerService.error({ error, message: error.message });\n          UINotificationService.show({\n            title: 'DICOM Segmentation Loader',\n            message: error.message,\n            type: 'error',\n            autoClose: true,\n          });\n        };\n\n        const {\n          referencedDisplaySet,\n          activatedLabelmapPromise,\n        } = displaySet.getSourceDisplaySet(\n          this.props.studies,\n          true,\n          onDisplaySetLoadFailureHandler\n        );\n        displaySet = referencedDisplaySet;\n\n        activatedLabelmapPromise.then(activatedLabelmapIndex => {\n          const selectionFired = new CustomEvent(\n            'extensiondicomsegmentationsegselected',\n            {\n              detail: { activatedLabelmapIndex: activatedLabelmapIndex },\n            }\n          );\n          document.dispatchEvent(selectionFired);\n        });\n      } else {\n        displaySet = displaySet.getSourceDisplaySet(this.props.studies);\n      }\n\n      if (!displaySet) {\n        const error = new Error('Source data not present');\n        const message = 'Source data not present';\n        LoggerService.error({ error, message });\n        UINotificationService.show({\n          autoClose: false,\n          title: 'Fail to load series',\n          message,\n          type: 'error',\n        });\n      }\n    }\n\n    if (displaySet.isSOPClassUIDSupported === false) {\n      const error = new Error('Modality not supported');\n      const message = 'Modality not supported';\n      LoggerService.error({ error, message });\n      UINotificationService.show({\n        autoClose: false,\n        title: 'Fail to load series',\n        message,\n        type: 'error',\n      });\n    }\n\n    this.props.setViewportSpecificData(viewportIndex, displaySet);\n  };\n\n  render() {\n    const { viewportSpecificData } = this.props;\n    const viewportData = values(viewportSpecificData);\n\n    return (\n      <div className=\"ViewerMain\">\n        {this.state.displaySets.length && (\n          <ConnectedViewportGrid\n            isStudyLoaded={this.props.isStudyLoaded}\n            studies={this.props.studies}\n            viewportData={viewportData}\n            setViewportData={this.setViewportData}\n          >\n            {/* Children to add to each viewport that support children */}\n          </ConnectedViewportGrid>\n        )}\n      </div>\n    );\n  }\n\n  componentWillUnmount() {\n    // Clear the entire viewport specific data\n    const { viewportSpecificData } = this.props;\n    Object.keys(viewportSpecificData).forEach(viewportIndex => {\n      this.props.clearViewportSpecificData(viewportIndex);\n    });\n\n    // TODO: These don't have to be viewer specific?\n    // Could qualify for other routes?\n    // hotkeys.destroy();\n\n    // Remove beforeUnload event handler...\n    //window.removeEventListener('beforeunload', unloadHandlers.beforeUnload);\n    // Destroy the synchronizer used to update reference lines\n    //OHIF.viewer.updateImageSynchronizer.destroy();\n    // TODO: Instruct all plugins to clean up themselves\n    //\n    // Clear references to all stacks in the StackManager\n    //StackManager.clearStacks();\n    // @TypeSafeStudies\n    // Clears OHIF.viewer.Studies collection\n    //OHIF.viewer.Studies.removeAll();\n    // @TypeSafeStudies\n    // Clears OHIF.viewer.StudyMetadataList collection\n    //OHIF.viewer.StudyMetadataList.removeAll();\n  }\n}\n\nexport default ViewerMain;\n","import OHIF from '@ohif/core';\nimport ViewerMain from './ViewerMain';\nimport { connect } from 'react-redux';\n\nconst {\n  setViewportSpecificData,\n  clearViewportSpecificData,\n} = OHIF.redux.actions;\n\nconst mapStateToProps = state => {\n  const { activeViewportIndex, layout, viewportSpecificData } = state.viewports;\n\n  return {\n    activeViewportIndex,\n    layout,\n    viewportSpecificData,\n    viewports: state.viewports,\n  };\n};\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    setViewportSpecificData: (viewportIndex, data) => {\n      dispatch(setViewportSpecificData(viewportIndex, data));\n    },\n    clearViewportSpecificData: () => {\n      dispatch(clearViewportSpecificData());\n    },\n  };\n};\n\nconst ConnectedViewerMain = connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(ViewerMain);\n\nexport default ConnectedViewerMain;\n","export default class FileLoader {\n  fileType;\n  loadFile(file, imageId) { }\n  getDataset(image, imageId) { }\n  getStudies(dataset, imageId) { }\n}\n","import cornerstoneWADOImageLoader from 'cornerstone-wado-image-loader';\nimport FileLoader from './fileLoader';\n\nconst PDFFileLoader = new (class extends FileLoader {\n  fileType = 'application/pdf';\n  loadFile(file, imageId) {\n    return cornerstoneWADOImageLoader.wadouri.loadFileRequest(imageId);\n  }\n\n  getDataset(image, imageId) {\n    const dataset = {};\n    dataset.imageId = image.imageId || imageId;\n    return dataset;\n  }\n\n  getStudies(dataset, imageId) {\n    return this.getDefaultStudy(imageId);\n  }\n\n  getDefaultStudy(imageId) {\n    const study = {\n      StudyInstanceUID: '',\n      StudyDate: '',\n      StudyTime: '',\n      AccessionNumber: '',\n      ReferringPhysicianName: '',\n      PatientName: '',\n      PatientID: '',\n      PatientBirthdate: '',\n      PatientSex: '',\n      StudyId: '',\n      StudyDescription: '',\n      series: [\n        {\n          SeriesInstanceUID: '',\n          SeriesDescription: '',\n          SeriesNumber: '',\n          instances: [\n            {\n              metadata: {\n                SOPInstanceUID: '',\n                SOPClassUID: '1.2.840.10008.5.1.4.1.1.104.1',\n                Rows: '',\n                Columns: '',\n                NumberOfFrames: 0,\n                InstanceNumber: 1,\n              },\n              getImageId: () => imageId,\n              isLocalFile: true,\n            },\n          ],\n        },\n      ],\n    };\n\n    return study;\n  }\n})();\n\nexport default PDFFileLoader;\n","import dcmjs from 'dcmjs';\nimport cornerstoneWADOImageLoader from 'cornerstone-wado-image-loader';\nimport FileLoader from './fileLoader';\nimport OHIF from '@ohif/core';\n\nconst metadataProvider = OHIF.cornerstone.metadataProvider;\n\nconst DICOMFileLoader = new (class extends FileLoader {\n  fileType = 'application/dicom';\n  loadFile(file, imageId) {\n    return cornerstoneWADOImageLoader.wadouri.loadFileRequest(imageId);\n  }\n\n  getDataset(image, imageId) {\n    let dataset = {};\n    try {\n      const dicomData = dcmjs.data.DicomMessage.readFile(image);\n\n      dataset = dcmjs.data.DicomMetaDictionary.naturalizeDataset(\n        dicomData.dict\n      );\n\n      metadataProvider.addInstance(dataset);\n\n      dataset._meta = dcmjs.data.DicomMetaDictionary.namifyDataset(\n        dicomData.meta\n      );\n    } catch (e) {\n      console.error('Error reading dicom file', e);\n    }\n    // Set imageId on dataset to be consumed later on\n    dataset.imageId = imageId;\n\n    return dataset;\n  }\n\n  getStudies(dataset, imageId) {\n    return this.getStudyFromDataset(dataset);\n  }\n\n  getStudyFromDataset(dataset = {}) {\n    const {\n      StudyInstanceUID,\n      StudyDate,\n      StudyTime,\n      AccessionNumber,\n      ReferringPhysicianName,\n      PatientName,\n      PatientID,\n      PatientBirthDate,\n      PatientSex,\n      StudyID,\n      StudyDescription,\n      SeriesInstanceUID,\n      SeriesDescription,\n      SeriesNumber,\n      imageId,\n    } = dataset;\n\n    const instance = {\n      metadata: dataset,\n      url: imageId,\n    };\n\n    const series = {\n      SeriesInstanceUID: SeriesInstanceUID,\n      SeriesDescription: SeriesDescription,\n      SeriesNumber: SeriesNumber,\n      instances: [instance],\n    };\n\n    const study = {\n      StudyInstanceUID,\n      StudyDate,\n      StudyTime,\n      AccessionNumber,\n      ReferringPhysicianName,\n      PatientName,\n      PatientID,\n      PatientBirthDate,\n      PatientSex,\n      StudyID,\n      StudyDescription,\n      /*\n      TODO: in case necessary to uncomment this block, double check every property\n      numberOfStudyRelatedSeries: NumberOfStudyRelatedSeries || DICOMWeb.getString(dataset['00201206']),\n      numberOfStudyRelatedInstances: NumberOfStudyRelatedInstances || DICOMWeb.getString(dataset['00201208']),\n      Modality: Modality || DICOMWeb.getString(dataset['00080060']),\n      ModalitiesInStudy: ModalitiesInStudy || DICOMWeb.getString(dataset['00080061']),\n      modalities:\n      */\n      series: [series],\n    };\n\n    return study;\n  }\n})();\n\nexport default DICOMFileLoader;\n","import cornerstoneWADOImageLoader from 'cornerstone-wado-image-loader';\nimport FileLoader from './fileLoader';\nimport PDFFileLoader from './pdfFileLoader';\nimport DICOMFileLoader from './dicomFileLoader';\n\nclass FileLoaderService extends FileLoader {\n  fileType;\n  loader;\n  constructor(file) {\n    super();\n    const fileType = file && file.type;\n    this.loader = this.getLoader(fileType);\n    this.fileType = this.loader.fileType;\n  }\n\n  static groupSeries(studies) {\n    const groupBy = (list, groupByKey, listKey) => {\n      let nonKeyCounter = 1;\n\n      return list.reduce((acc, obj) => {\n        let key = obj[groupByKey];\n        const list = obj[listKey];\n\n        // in case key not found, group it using counter\n        key = key ? key : '' + nonKeyCounter++;\n\n        if (!acc[key]) {\n          acc[key] = { ...obj };\n          acc[key][listKey] = [];\n        }\n\n        acc[key][listKey].push(...list);\n\n        return acc;\n      }, {});\n    };\n\n    const studiesGrouped = Object.values(\n      groupBy(studies, 'StudyInstanceUID', 'series')\n    );\n\n    const result = studiesGrouped.map(studyGroup => {\n      const seriesGrouped = groupBy(\n        studyGroup.series,\n        'SeriesInstanceUID',\n        'instances'\n      );\n      studyGroup.series = Object.values(seriesGrouped);\n\n      return studyGroup;\n    });\n\n    return result;\n  }\n\n  addFile(file) {\n    return cornerstoneWADOImageLoader.wadouri.fileManager.add(file);\n  }\n\n  loadFile(file, imageId) {\n    return this.loader.loadFile(file, imageId);\n  }\n\n  getDataset(image, imageId) {\n    return this.loader.getDataset(image, imageId);\n  }\n\n  getStudies(dataset, imageId) {\n    return this.loader.getStudies(dataset, imageId);\n  }\n\n  getLoader(fileType) {\n    if (fileType === 'application/pdf') {\n      return PDFFileLoader;\n    } else {\n      // Default to dicom loader\n      return DICOMFileLoader;\n    }\n  }\n}\n\nexport default FileLoaderService;\n","import FileLoaderService from './localFileLoaders/fileLoaderService';\n\nconst processFile = async file => {\n  try {\n    const fileLoaderService = new FileLoaderService(file);\n    const imageId = fileLoaderService.addFile(file);\n    const image = await fileLoaderService.loadFile(file, imageId);\n    const dataset = await fileLoaderService.getDataset(image, imageId);\n    const studies = await fileLoaderService.getStudies(dataset, imageId);\n\n    return studies;\n  } catch (error) {\n    console.log(\n      error.name,\n      ':Error when trying to load and process local files:',\n      error.message\n    );\n  }\n};\n\nexport default async function filesToStudies(files) {\n  const processFilesPromises = files.map(processFile);\n  const studies = await Promise.all(processFilesPromises);\n\n  return FileLoaderService.groupSeries(studies.flat());\n}\n","import React, { useState } from 'react';\nimport classnames from 'classnames';\nimport PropTypes from 'prop-types';\nimport { ErrorBoundary, Icon } from '@ohif/ui';\nimport { servicesManager } from './../../App';\n\nimport './ErrorBoundaryDialog.css';\n\nconst { UIModalService } = servicesManager.services;\n\nconst ErrorBoundaryDialog = ({ context, children }) => {\n  const handleOnError = (error, componentStack) => {\n    const ErrorDialog = () => {\n      const [open, setOpen] = useState(false);\n\n      return (\n        <div className=\"ErrorFallback\" role=\"alert\">\n          <div className=\"ErrorBoundaryDialog\">\n            <h3 className=\"ErrorBoundaryDialogTitle\">\n              {context}: <span>{error.message}</span>\n            </h3>\n          </div>\n          <button\n            className=\"btn btn-primary btn-sm ErrorBoundaryDialogButton\"\n            onClick={() => setOpen(s => !s)}\n          >\n            <Icon\n              name=\"chevron-down\"\n              className={classnames('ErrorBoundaryDialogIcon', {\n                opened: open,\n              })}\n            />\n            Stack Trace\n          </button>\n\n          {open && <pre>{componentStack}</pre>}\n        </div>\n      );\n    };\n\n    UIModalService.show({\n      content: ErrorDialog,\n      title: `Something went wrong in ${context}`,\n    });\n  };\n\n  const fallbackComponent = () => (\n    <div className=\"ErrorFallback\" role=\"alert\">\n      <p>\n        Error rendering {context}. <br /> Check the browser console for more\n        details.\n      </p>\n    </div>\n  );\n\n  return (\n    <ErrorBoundary\n      fallbackComponent={fallbackComponent}\n      context={context}\n      onError={handleOnError}\n    >\n      {children}\n    </ErrorBoundary>\n  );\n};\n\nErrorBoundaryDialog.propTypes = {\n  context: PropTypes.string.isRequired,\n  children: PropTypes.node,\n};\n\nexport default ErrorBoundaryDialog;\n","import ErrorBoundaryDialog from './ErrorBoundaryDialog';\n\nexport default ErrorBoundaryDialog;\n"],"sourceRoot":""}