{"version":3,"sources":["webpack:///./studylist/StudyListRoute.js","webpack:///./studylist/ConnectedStudyList.js","webpack:///./studylist/StudyListRouting.js"],"names":["StudyListRoute","props","history","server","studyListFunctionsEnabled","user","useState","fieldName","direction","sort","setSort","studyDateTo","studyDateFrom","PatientName","PatientID","AccessionNumber","StudyDate","modalities","StudyDescription","patientNameOrId","accessionOrModalityOrDescription","allFields","filterValues","setFilterValues","studies","setStudies","isSearchingForStudies","error","searchStatus","setSearchStatus","activeModalId","setActiveModalId","rowsPerPage","setRowsPerPage","pageNumber","setPageNumber","appContext","useContext","AppContext","displaySize","useMedia","debouncedSort","useDebounce","debouncedFilters","appConfig","useEffect","getStudyList","group","response","isFetching","fetchStudies","JSON","stringify","ConnectedDicomFilesUploader","isOpen","onClose","ConnectedHeader","useLargeLogo","className","style","fontWeight","fontSize","email","onImport","length","isLoading","hasError","onSelectItem","studyInstanceUID","viewerPath","RoutesUtil","studyInstanceUIDs","push","pathname","onSort","sortFieldName","sortDirection","onFilterChange","value","state","studyListDateFilterNumDays","currentPage","nextPageFunc","prevPageFunc","onRowsPerPageChange","Rows","recordCount","filters","mappedFilters","ModalitiesInStudy","limit","offset","fuzzymatching","supportsFuzzyMatching","_fetchStudies","mappedStudies","map","study","undefined","StudyInstanceUID","sortedStudies","_sortStudies","numToTake","result","slice","field","order","moment","isValid","format","a","b","fieldA","fieldB","toISOString","queryFiltersArray","firstSet","_getQueryFiltersForValue","secondSet","concat","queryPromises","forEach","filter","searchStudiesPromise","OHIF","searchStudies","Promise","all","lotsOfStudies","allowedUIDs","config","headers","Authorization","localStorage","getItem","Accept","axiosInstance","get","res","data","Studies","alert","studiesIDs","Object","keys","arrayOfStudies","some","s","includes","then","catch","accessStudies","allowedStudies","info","user_permissions","studiesAccessControl","studiesEditControl","studiesMap","parse","studiesMapKeys","studyUID","key","setItem","content","fields","queryFilters","assign","propTypes","PropTypes","object","string","bool","defaultProps","withRouter","isActive","active","ConnectedStudyList","connect","servers","find","auth","UrlUtil","utils","urlUtil","StudyListRouting","routeLocation","location","queryString","getQueryFilters","shape","search","isRequired"],"mappings":"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","file":"17.bundle.68b1d9b1d8e8a11efe5e.js","sourcesContent":["/* eslint-disable react/no-unescaped-entities */\nimport React, { useState, useEffect, useContext } from 'react';\nimport PropTypes from 'prop-types';\nimport OHIF from '@ohif/core';\nimport { withRouter } from 'react-router-dom';\nimport {\n  StudyList,\n  PageToolbar,\n  TablePagination,\n  useDebounce,\n  useMedia,\n} from '@ohif/ui';\nimport ConnectedHeader from '../connectedComponents/ConnectedHeader.js';\nimport * as RoutesUtil from '../routes/routesUtil';\nimport moment from 'moment';\nimport ConnectedDicomFilesUploader from '../googleCloud/ConnectedDicomFilesUploader';\nimport AppContext from '../context/AppContext';\nimport axiosInstance from 'axios';\n\nfunction StudyListRoute(props) {\n  const { history, server, studyListFunctionsEnabled, user } = props;\n\n  const [sort, setSort] = useState({\n    fieldName: 'PatientName',\n    direction: 'desc',\n  });\n  const [filterValues, setFilterValues] = useState({\n    studyDateTo: null,\n    studyDateFrom: null,\n    PatientName: '',\n    PatientID: '',\n    AccessionNumber: '',\n    StudyDate: '',\n    modalities: '',\n    StudyDescription: '',\n    patientNameOrId: '',\n    accessionOrModalityOrDescription: '',\n    allFields: '',\n  });\n  const [studies, setStudies] = useState([]);\n\n  const [searchStatus, setSearchStatus] = useState({\n    isSearchingForStudies: false,\n    error: null,\n  });\n  const [activeModalId, setActiveModalId] = useState(null);\n  const [rowsPerPage, setRowsPerPage] = useState(25);\n  const [pageNumber, setPageNumber] = useState(0);\n  const appContext = useContext(AppContext);\n\n  const displaySize = useMedia(\n    [\n      '(min-width: 1750px)',\n      '(min-width: 1000px) and (max-width: 1749px)',\n      '(max-width: 999px)',\n    ],\n    ['large', 'medium', 'small'],\n    'small'\n  );\n\n  const debouncedSort = useDebounce(sort, 200);\n  const debouncedFilters = useDebounce(filterValues, 250);\n\n  const { appConfig = {} } = appContext;\n\n  useEffect(() => {\n    const fetchStudies = async () => {\n      try {\n        setSearchStatus({ error: null, isSearchingForStudies: true });\n\n        const response = await getStudyList(\n          user,\n          props.group,\n          server,\n          debouncedFilters,\n          debouncedSort,\n          rowsPerPage,\n          pageNumber,\n          displaySize\n        );\n\n        setStudies(response);\n        setSearchStatus({ error: null, isSearchingForStudies: false });\n      } catch (error) {\n        setSearchStatus({ error: true, isFetching: false });\n      }\n    };\n\n    if (server) {\n      fetchStudies();\n    }\n  }, [\n    debouncedFilters,\n    debouncedSort,\n    rowsPerPage,\n    pageNumber,\n    displaySize,\n    server,\n    user,\n    props.group,\n  ]);\n\n  if (searchStatus.error) {\n    return <div>Error: {JSON.stringify(searchStatus.error)}</div>;\n  } else if (studies === [] && !activeModalId) {\n    return <div>Loading...</div>;\n  }\n\n  function handleSort(fieldName) {\n    let sortFieldName = fieldName;\n    let sortDirection = 'asc';\n\n    if (fieldName === sort.fieldName) {\n      if (sort.direction === 'asc') {\n        sortDirection = 'desc';\n      } else {\n        sortFieldName = null;\n        sortDirection = null;\n      }\n    }\n\n    setSort({\n      fieldName: sortFieldName,\n      direction: sortDirection,\n    });\n  }\n\n  function handleFilterChange(fieldName, value) {\n    setFilterValues(state => {\n      return {\n        ...state,\n        [fieldName]: value,\n      };\n    });\n  }\n\n  return (\n    <>\n      <ConnectedDicomFilesUploader\n        isOpen={activeModalId === 'DicomFilesUploader'}\n        onClose={() => setActiveModalId(null)}\n      />\n\n      <ConnectedHeader useLargeLogo={true}></ConnectedHeader>\n\n      <div className=\"study-list-header\">\n        <div className=\"header\">\n          {props.group ? (\n            <h1 style={{ fontWeight: 300, fontSize: '22px' }}>\n              <b>{props.group}</b>'s StudyList\n            </h1>\n          ) : (\n            <h1 style={{ fontWeight: 300, fontSize: '22px' }}>\n              <b>{user.email}</b>'s StudyList\n            </h1>\n          )}\n        </div>\n        <div className=\"actions\">\n          {!props.group && studyListFunctionsEnabled && (\n            <PageToolbar\n              onImport={() => setActiveModalId('DicomFilesUploader')}\n            />\n          )}\n          <span className=\"study-count\">{studies.length}</span>\n        </div>\n      </div>\n      <div className=\"table-head-background\" />\n      <div className=\"study-list-container\">\n        <StudyList\n          isLoading={searchStatus.isSearchingForStudies}\n          hasError={searchStatus.error === true}\n          // Rows\n          studies={studies}\n          onSelectItem={studyInstanceUID => {\n            const viewerPath = RoutesUtil.parseViewerPath(appConfig, server, {\n              studyInstanceUIDs: studyInstanceUID,\n            });\n            history.push({\n              pathname: viewerPath,\n            });\n          }}\n          // Table Header\n          sort={sort}\n          onSort={handleSort}\n          filterValues={filterValues}\n          onFilterChange={handleFilterChange}\n          studyListDateFilterNumDays={appConfig.studyListDateFilterNumDays}\n          displaySize={displaySize}\n        />\n        {/* PAGINATION FOOTER */}\n        <TablePagination\n          currentPage={pageNumber}\n          nextPageFunc={() => setPageNumber(pageNumber + 1)}\n          prevPageFunc={() => setPageNumber(pageNumber - 1)}\n          onRowsPerPageChange={Rows => setRowsPerPage(Rows)}\n          rowsPerPage={rowsPerPage}\n          recordCount={studies.length}\n        />\n      </div>\n    </>\n  );\n}\n\nStudyListRoute.propTypes = {\n  filters: PropTypes.object,\n  PatientID: PropTypes.string,\n  server: PropTypes.object,\n  user: PropTypes.object,\n  history: PropTypes.object,\n  studyListFunctionsEnabled: PropTypes.bool,\n  group: PropTypes.string,\n};\n\nStudyListRoute.defaultProps = {\n  studyListFunctionsEnabled: true,\n  group: '',\n};\n\nasync function getStudyList(\n  user,\n  group,\n  server,\n  filters,\n  sort,\n  rowsPerPage,\n  pageNumber,\n  displaySize\n) {\n  const {\n    allFields,\n    patientNameOrId,\n    accessionOrModalityOrDescription,\n  } = filters;\n  const sortFieldName = sort.fieldName || 'PatientName';\n  const sortDirection = sort.direction || 'desc';\n\n  const mappedFilters = {\n    PatientID: filters.PatientID,\n    PatientName: filters.PatientName,\n    AccessionNumber: filters.AccessionNumber,\n    StudyDescription: filters.StudyDescription,\n    ModalitiesInStudy: filters.modalities,\n\n    // NEVER CHANGE\n    studyDateFrom: filters.studyDateFrom,\n    studyDateTo: filters.studyDateTo,\n    limit: rowsPerPage,\n    offset: pageNumber * rowsPerPage,\n    fuzzymatching: server.supportsFuzzyMatching === true,\n  };\n\n  const studies = await _fetchStudies(\n    user,\n    group,\n    server,\n    mappedFilters,\n    displaySize,\n    {\n      allFields,\n      patientNameOrId,\n      accessionOrModalityOrDescription,\n    }\n  );\n\n  // Only the fields we use\n  const mappedStudies = studies.map(study => {\n    const PatientName =\n      typeof study.PatientName === 'string' ? study.PatientName : undefined;\n\n    return {\n      AccessionNumber: study.AccessionNumber, // \"1\"\n      modalities: study.modalities, // \"SEG\\\\MR\"\n      PatientID: study.PatientID, // \"NOID\"\n      PatientName, // \"NAME^NONE\"\n      StudyDate: study.StudyDate, // \"Jun 28, 2002\"\n      StudyDescription: study.StudyDescription, // \"BRAIN\"\n      StudyInstanceUID: study.StudyInstanceUID, // \"1.3.6.1.4.1.5962.99.1.3814087073.479799962.1489872804257.3.0\"\n    };\n  });\n\n  // For our smaller displays, map our field name to a single\n  // field we can actually sort by.\n  const sortFieldNameMapping = {\n    allFields: 'PatientName',\n    patientNameOrId: 'PatientName',\n    accessionOrModalityOrDescription: 'modalities',\n  };\n  const mappedSortFieldName =\n    sortFieldNameMapping[sortFieldName] || sortFieldName;\n\n  const sortedStudies = _sortStudies(\n    mappedStudies,\n    mappedSortFieldName,\n    sortDirection\n  );\n\n  // Because we've merged multiple requests, we may have more than\n  // our Rows per page. Let's `take` that number from our sorted array.\n  // This \"might\" cause paging issues.\n  const numToTake =\n    sortedStudies.length < rowsPerPage ? sortedStudies.length : rowsPerPage;\n  const result = sortedStudies.slice(0, numToTake);\n\n  return result;\n}\n\n/**\n *\n *\n * @param {object[]} studies - Array of studies to sort\n * @param {string} studies.StudyDate - Date in 'MMM DD, YYYY' format\n * @param {string} field - name of properties on study to sort by\n * @param {string} order - 'asc' or 'desc'\n * @returns\n */\nfunction _sortStudies(studies, field, order) {\n  // Make sure our StudyDate is in a valid format and create copy of studies array\n  const sortedStudies = studies.map(study => {\n    if (!moment(study.StudyDate, 'MMM DD, YYYY', true).isValid()) {\n      study.StudyDate = moment(study.StudyDate, 'YYYYMMDD').format(\n        'MMM DD, YYYY'\n      );\n    }\n    return study;\n  });\n\n  // Sort by field\n  sortedStudies.sort(function(a, b) {\n    let fieldA = a[field];\n    let fieldB = b[field];\n    if (field === 'StudyDate') {\n      fieldA = moment(fieldA).toISOString();\n      fieldB = moment(fieldB).toISOString();\n    }\n\n    // Order\n    if (order === 'desc') {\n      if (fieldA < fieldB) {\n        return -1;\n      }\n      if (fieldA > fieldB) {\n        return 1;\n      }\n      return 0;\n    } else {\n      if (fieldA > fieldB) {\n        return -1;\n      }\n      if (fieldA < fieldB) {\n        return 1;\n      }\n      return 0;\n    }\n  });\n\n  return sortedStudies;\n}\n\n/**\n * We're forced to do this because DICOMWeb does not support \"AND|OR\" searches\n * across multiple fields. This allows us to make multiple requests, remove\n * duplicates, and return the result set as if it were supported\n *\n * @param {object} server\n * @param {Object} filters\n * @param {string} displaySize - small, medium, or large\n * @param {string} multi.allFields\n * @param {string} multi.patientNameOrId\n * @param {string} multi.accessionOrModalityOrDescription\n */\nasync function _fetchStudies(\n  user,\n  group,\n  server,\n  filters,\n  displaySize,\n  { allFields, patientNameOrId, accessionOrModalityOrDescription }\n) {\n  let queryFiltersArray = [filters];\n\n  if (displaySize === 'small') {\n    const firstSet = _getQueryFiltersForValue(\n      filters,\n      [\n        'PatientID',\n        'PatientName',\n        'AccessionNumber',\n        'StudyDescription',\n        'ModalitiesInStudy',\n      ],\n      allFields\n    );\n\n    if (firstSet.length) {\n      queryFiltersArray = firstSet;\n    }\n  } else if (displaySize === 'medium') {\n    const firstSet = _getQueryFiltersForValue(\n      filters,\n      ['PatientID', 'PatientName'],\n      patientNameOrId\n    );\n\n    const secondSet = _getQueryFiltersForValue(\n      filters,\n      ['AccessionNumber', 'StudyDescription', 'ModalitiesInStudy'],\n      accessionOrModalityOrDescription\n    );\n\n    if (firstSet.length || secondSet.length) {\n      queryFiltersArray = firstSet.concat(secondSet);\n    }\n  }\n\n  const queryPromises = [];\n\n  queryFiltersArray.forEach(filter => {\n    const searchStudiesPromise = OHIF.studies.searchStudies(server, filter);\n    queryPromises.push(searchStudiesPromise);\n  });\n\n  const lotsOfStudies = await Promise.all(queryPromises);\n  const studies = [];\n  const allowedUIDs = [];\n\n  if (group !== '') {\n    const config = {\n      headers: {\n        Authorization: `JWT ${localStorage.getItem('access')}`,\n        'Content-Type': 'application/json',\n        Accept: 'application/json',\n      },\n    };\n    const res = await axiosInstance.get(\n      `/api/view_studies?groupName=${group}&user=${\n        user['email']\n      }`,\n      config\n    );\n    if (res.data.Studies === \"You don't belong to this group!\") {\n      alert(\"You don't belong to this group!\");\n    } else {\n      let studiesIDs = Object.keys(res.data.Studies);\n\n      lotsOfStudies.forEach(arrayOfStudies => {\n        if (arrayOfStudies) {\n          arrayOfStudies.forEach(study => {\n            if (\n              !studies.some(\n                s => s.StudyInstanceUID === study.StudyInstanceUID\n              ) &&\n              studiesIDs.includes(study.StudyInstanceUID) &&\n              study.modalities !== 'SR'\n            ) {\n              study['user_permissions'] =\n                res.data.Studies[study.StudyInstanceUID]['user_permissions'];\n              study['user'] = res.data.Studies[study.StudyInstanceUID]['user'];\n              studies.push(study);\n              allowedUIDs.push(study['StudyInstanceUID']);\n            }\n          });\n        }\n      });\n    }\n  } else {\n    const accessStudies = await axiosInstance\n      .get(`/api/image/?user=${user.email}`, {\n        headers: {\n          'Content-Type': 'multipart/form-data',\n          Authorization: `JWT ${localStorage.getItem('access')}`,\n        },\n      })\n      .then(res => {\n        return res;\n      })\n      .catch(error => {\n        return error.response;\n      });\n\n    let allowedStudies = [];\n    let info = {};\n\n    accessStudies.data.forEach(study => {\n      info[study['study_uid']] = {\n        user: study['user'],\n        user_permissions: study['user_permissions'],\n      };\n      allowedStudies.push(study['study_uid']);\n    });\n\n    // Flatten and dedupe\n    lotsOfStudies.forEach(arrayOfStudies => {\n      if (arrayOfStudies) {\n        arrayOfStudies.forEach(study => {\n          if (\n            !studies.some(s => s.StudyInstanceUID === study.StudyInstanceUID) &&\n            allowedStudies.includes(study.StudyInstanceUID) &&\n            study.modalities !== 'SR'\n          ) {\n            study['user_permissions'] =\n              info[study.StudyInstanceUID]['user_permissions'];\n            study['user'] = info[study.StudyInstanceUID]['user'];\n            studies.push(study);\n            allowedUIDs.push(study['StudyInstanceUID']);\n          }\n        });\n      }\n    });\n  }\n\n  const studiesAccessControl = localStorage.getItem('studyAccessControl');\n  const studiesEditControl = localStorage.getItem('studyEditControl');\n\n  if (!studiesEditControl) {\n    let content = {};\n    studies.forEach(function(study) {\n      let studyUID = study['StudyInstanceUID'];\n      if (\n        localStorage.getItem('HealthProfessional_Authenticated') &&\n        !study['user_permissions'].includes('Edit Studies') &&\n        study['user'] !== user['email']\n      ) {\n        content[studyUID] = -1;\n      } else {\n        content[studyUID] = 0;\n      }\n    });\n    localStorage.setItem('studyEditControl', JSON.stringify(content));\n  } else {\n    let studiesMap = JSON.parse(studiesEditControl);\n    let studiesMapKeys = Object.keys(studiesMap);\n\n    studies.forEach(function(study) {\n      let studyUID = study['StudyInstanceUID'];\n      if (!studiesMapKeys.includes(studyUID)) {\n        if (\n          localStorage.getItem('HealthProfessional_Authenticated') &&\n          !study['user_permissions'].includes('Edit Studies') &&\n          study['user'] !== user['email']\n        ) {\n          studiesMap[studyUID] = -1;\n        } else {\n          studiesMap[studyUID] = 0;\n        }\n      }\n    });\n    studiesMapKeys.forEach(function(key) {\n      if (!allowedUIDs.includes(key)) {\n        delete studiesMap[key];\n      }\n    });\n    localStorage.setItem('studyEditControl', JSON.stringify(studiesMap));\n  }\n\n  if (!studiesAccessControl) {\n    let content = {};\n    studies.forEach(function(study) {\n      let studyUID = study['StudyInstanceUID'];\n      if (\n        localStorage.getItem('HealthProfessional_Authenticated') &&\n        !study['user_permissions'].includes('View Studies Metadata') &&\n        study['user'] !== user['email']\n      ) {\n        content[studyUID] = -1;\n      } else {\n        content[studyUID] = 0;\n      }\n    });\n    localStorage.setItem('studyAccessControl', JSON.stringify(content));\n  } else {\n    let studiesMap = JSON.parse(studiesAccessControl);\n    let studiesMapKeys = Object.keys(studiesMap);\n\n    studies.forEach(function(study) {\n      let studyUID = study['StudyInstanceUID'];\n      if (!studiesMapKeys.includes(studyUID)) {\n        if (\n          localStorage.getItem('HealthProfessional_Authenticated') &&\n          !study['user_permissions'].includes('View Studies Metadata') &&\n          study['user'] !== user['email']\n        ) {\n          studiesMap[studyUID] = -1;\n        } else {\n          studiesMap[studyUID] = 0;\n        }\n      }\n    });\n    studiesMapKeys.forEach(function(key) {\n      if (!allowedUIDs.includes(key)) {\n        delete studiesMap[key];\n      }\n    });\n    localStorage.setItem('studyAccessControl', JSON.stringify(studiesMap));\n  }\n\n  return studies;\n}\n\nfunction _getQueryFiltersForValue(filters, fields, value) {\n  const queryFilters = [];\n\n  if (value === '' || !value) {\n    return queryFilters;\n  }\n\n  fields.forEach(field => {\n    const filter = Object.assign(\n      {\n        PatientID: '',\n        PatientName: '',\n        AccessionNumber: '',\n        StudyDescription: '',\n        ModalitiesInStudy: '',\n      },\n      filters\n    );\n\n    filter[field] = value;\n    queryFilters.push(filter);\n  });\n\n  return queryFilters;\n}\n\nexport default withRouter(StudyListRoute);\n","import { connect } from 'react-redux';\n\nimport StudyListRoute from './StudyListRoute.js';\n\nconst isActive = a => a.active === true;\n\nconst mapStateToProps = state => {\n  const activeServer = state.servers.servers.find(isActive);\n\n  return {\n    server: activeServer,\n    user: state.auth.user,\n  };\n};\n\nconst ConnectedStudyList = connect(\n  mapStateToProps,\n  null\n)(StudyListRoute);\n\nexport default ConnectedStudyList;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { withRouter } from 'react-router-dom';\nimport ConnectedStudyList from './ConnectedStudyList';\nimport OHIF from '@ohif/core';\n\nconst { urlUtil: UrlUtil } = OHIF.utils;\n\nfunction StudyListRouting({ location: routeLocation }) {\n  const filters = UrlUtil.queryString.getQueryFilters(routeLocation);\n\n  return (\n    <ConnectedStudyList filters={filters} studyListFunctionsEnabled={true} />\n  );\n}\n\nStudyListRouting.propTypes = {\n  location: PropTypes.shape({\n    search: PropTypes.string,\n  }).isRequired,\n};\n\nexport default withRouter(StudyListRouting);\n"],"sourceRoot":""}