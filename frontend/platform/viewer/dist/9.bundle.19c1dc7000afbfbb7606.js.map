{"version":3,"sources":["webpack:///./components/types.js","webpack:///./components/modalities.js","webpack:///./components/AddAlgorithm.js"],"names":["NavBtnLink","styled","Link","FormTextArea","fieldRenderProps","max","value","others","className","TextArea","maxLength","rows","length","CustomInput","fieldType","Input","type","ValidationMessage","valid","visited","validationMessage","requiredValidator","ConnectedAddAlgorithm","connect","state","user","auth","React","useState","setType","bodyPart","setBodyPart","inputExtension","setInputExtension","framework","setFramework","inputModality","setInputModality","visibility","setVisibility","redirect","setRedirect","deleteRecord","algorithm","axiosInstance","get","headers","Authorization","localStorage","getItem","then","res","catch","error","response","status","toast","position","autoClose","hideProgressBar","closeOnClick","pauseOnHover","draggable","progress","undefined","Msg","closeToast","style","fontSize","fontFamily","display","margin","background","borderRadius","padding","onClick","handleSubmit","formRenderProps","a","email","repeated","algorithms","data","warn","Form","initialValues","description","overview","architecture","performance","info","references","input","output","onSubmit","render","Field","name","pattern","component","validator","valueGetter","optional","onChange","e","target","required","key","map","extension","modalities","modality","types","Object","keys","bodyParts","to","disabled","allowSubmit","pathname","version","algorithm_overview","model_architecture","model_performance","data_description","additional_info","task","newestOnTop","rtl","pauseOnFocusLoss"],"mappings":"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","file":"9.bundle.19c1dc7000afbfbb7606.js","sourcesContent":["export default [\n  'Image Processing',\n  'Image Registration',\n  'Object Localisation',\n  'Classification',\n  'Lesion Detection',\n  'Segmentation',\n];\n","export default [\n  'AR - Autorefraction',\n  'BDUS - Bone Densitometry (ultrasound)',\n  'BI - Biomagnetic imaging',\n  'BMD - Bone Densitometry (X-Ray)',\n  'CR - Computed Radiography',\n  'CT - Computed Tomography',\n  'DG - Diaphanography',\n  'DX - Digital Radiography',\n  'ECG - Electrocardiography',\n  'EPS - Cardiac Electrophysiology',\n  'ES - Endoscopy',\n  'FID - Fiducials',\n  'GM - General Microscopy',\n  'HD - Hemodynamic Waveform',\n  'IO - Intra-Oral Radiography',\n  'IOL - Intraocular Lens Data',\n  'IVOCT - Intravascular Optical Coherence Tomography',\n  'IVUS - Intravascular Ultrasound',\n  'KER - Keratometry',\n  'LEN - Lensometry',\n  'LS - Laser surface scan',\n  'MG - Mammography',\n  'MR - Magnetic Resonance',\n  'M3D - Model for 3D Manufacturing',\n  'NM - Nuclear Medicine',\n  'OAM - Ophthalmic Axial Measurements',\n  'OCT - Optical Coherence Tomography (non-Ophthalmic)',\n  'OP - Ophthalmic Photography',\n  'OPM - Ophthalmic Mapping',\n  'OPT - Ophthalmic Tomography',\n  'OPTBSV - Ophthalmic Tomography B-scan Volume Analysis',\n  'OPTENF - Ophthalmic Tomography En Face',\n  'OPV - Ophthalmic Visual Field',\n  'OSS - Optical Surface Scan',\n  'OT - Other',\n  'PT - Positron emission tomography (PET)',\n  'PX - Panoramic X-Ray',\n  'REG - Registration',\n  'RESP - Respiratory Waveform',\n  'RF - Radio Fluoroscopy',\n  'RG - Radiographic imaging (conventional film/screen)',\n  'RTIMAGE - Radiotherapy Image',\n  'RTRAD - RT Radiation',\n  'SEG - Segmentation',\n  'SM - Slide Microscopy',\n  'SMR - Stereometric Relationship',\n  'SRF - Subjective Refraction',\n  'STAIN - Automated Slide Stainer',\n  'TG - Thermography',\n  'US - Ultrasound',\n  'VA - Visual Acuity',\n  'XA - X-Ray Angiography',\n  'XC - External-camera Photography',\n];\n","/* eslint-disable react/no-unescaped-entities */\n/* eslint-disable react/prop-types */\nimport React, { Fragment, useState } from 'react';\nimport { Form, Field } from '@progress/kendo-react-form';\nimport { Input, TextArea } from '@progress/kendo-react-inputs';\nimport './AddAlgorithm.css';\nimport types from './types';\nimport bodyParts from './bodyParts';\nimport modalities from './modalities';\nimport { NavLink as Link } from 'react-router-dom';\nimport styled from 'styled-components';\nimport { connect } from 'react-redux';\nimport { Redirect } from 'react-router-dom';\nimport axiosInstance from 'axios';\nimport { ToastContainer, toast } from 'react-toastify';\n\nexport const NavBtnLink = styled(Link)`\n  cursor: pointer;\n  padding: 10px 10px;\n  margin-right: 272px;\n  margin-left: 10px;\n  border-radius: 4px;\n  background-color: #646c74;\n  color: #fff;\n  &:hover {\n    transition: all 0.2s ease-in-out;\n    background: #000000;\n    color: #fff;\n  }\n`;\n\nconst FormTextArea = fieldRenderProps => {\n  const { max, value, ...others } = fieldRenderProps;\n\n  return (\n    <div className={'k-form-field-wrap'}>\n      <TextArea maxLength={max} rows={2} {...others} />\n      {value.length} / {max}\n    </div>\n  );\n};\n\nconst CustomInput = ({ fieldType, ...others }) => {\n  return (\n    <div>\n      <Input type={fieldType} {...others} />\n      <ValidationMessage {...others} />\n    </div>\n  );\n};\n\nconst ValidationMessage = ({ valid, visited, validationMessage }) => {\n  return (\n    <>\n      {!valid && visited && <div className=\"required\">{validationMessage}</div>}\n    </>\n  );\n};\n\nconst requiredValidator = value => {\n  return value ? '' : 'This field is required';\n};\n\nfunction AddAlgorithm({ user }) {\n  const [type, setType] = React.useState('');\n  const [bodyPart, setBodyPart] = React.useState('');\n  const [inputExtension, setInputExtension] = React.useState('');\n  const [framework, setFramework] = React.useState('');\n  const [inputModality, setInputModality] = React.useState('');\n  const [visibility, setVisibility] = React.useState(false);\n  const [redirect, setRedirect] = useState(false);\n\n  const handleVisibilityChange = () => {\n    if (visibility == false) {\n      setVisibility(true);\n    } else {\n      setVisibility(false);\n    }\n  };\n\n  const deleteRecord = async algorithm => {\n    const response = await axiosInstance\n      .get(`/api/model_delete/?algorithm=${algorithm}`, {\n        headers: {\n          'Content-Type': 'multipart/form-data',\n          Authorization: `JWT ${localStorage.getItem('access')}`,\n        },\n      })\n      .then(res => {\n        return res;\n      })\n      .catch(error => {\n        return error.response;\n      });\n\n    if (response.status === 200) {\n      setRedirect(true);\n    } else {\n      toast.error('Failed to overwrite! Please, try again.', {\n        position: 'top-right',\n        autoClose: 5000,\n        hideProgressBar: false,\n        closeOnClick: true,\n        pauseOnHover: true,\n        draggable: true,\n        progress: undefined,\n      });\n    }\n  };\n\n  const Msg = ({ closeToast, algorithm }) => (\n    <Fragment>\n      <div\n        style={{\n          fontSize: '14px',\n          fontFamily: 'Helvetica',\n        }}\n      >\n        An algorithm with the name \"{algorithm}\" <b>already exists</b>. Do you\n        want to <b>overwrite</b> it?\n      </div>\n      <div>\n        <button\n          style={{\n            fontSize: '14px',\n            fontFamily: 'Helvetica',\n            display: 'inline-block',\n            margin: '7px' /* space between buttons */,\n            background: '#FFD700' /* background color */,\n            borderRadius: '6px' /* rounded corners */,\n            padding: '8px 16px' /* space around text */,\n          }}\n          onClick={() => deleteRecord(algorithm)}\n        >\n          Yes\n        </button>\n        <button\n          style={{\n            fontSize: '14px',\n            fontFamily: 'Helvetica',\n            display: 'inline-block',\n            margin: '7px' /* space between buttons */,\n            background: '#FFD700' /* background color */,\n            'border-radius': '6px' /* rounded corners */,\n            padding: '8px 16px' /* space around text */,\n          }}\n          onClick={closeToast}\n        >\n          No\n        </button>\n      </div>\n    </Fragment>\n  );\n\n  const handleSubmit = async formRenderProps => {\n    const response = await axiosInstance\n      .get(`/api/model/?user=${user.email}`, {\n        headers: {\n          'Content-Type': 'multipart/form-data',\n          Authorization: `JWT ${localStorage.getItem('access')}`,\n        },\n      })\n      .then(res => {\n        return res;\n      })\n      .catch(error => {\n        return error.response;\n      });\n    let repeated = false;\n    const algorithms = response.data;\n    for (let a = 0; a < algorithms.length; a++) {\n      if (algorithms[a]['name'] == formRenderProps['name']) {\n        let algorithm = algorithms[a]['name'];\n        repeated = true;\n\n        toast.warn(<Msg algorithm={algorithm} />, {\n          position: 'top-right',\n          autoClose: 10000,\n          hideProgressBar: false,\n          closeOnClick: true,\n          pauseOnHover: true,\n          draggable: true,\n          progress: undefined,\n        });\n      }\n    }\n    if (!repeated) {\n      setRedirect(true);\n    }\n  };\n\n  return (\n    <div className=\"content\">\n      <Form\n        initialValues={{\n          description: '',\n          overview: '',\n          architecture: '',\n          performance: '',\n          data: '',\n          info: '',\n          references: '',\n          input: '',\n          output: '',\n        }}\n        onSubmit={handleSubmit}\n        render={formRenderProps => (\n          <form className=\"formAlgorithm\" onSubmit={formRenderProps.onSubmit}>\n            <h1>Add Algorithm</h1>\n            <label>\n              Algorithm Name\n              <p className=\"tooltiptext\">\n                Unique identifier for the algorithm.\n              </p>\n              <Field\n                className=\"inputAlgorithm\"\n                name=\"name\"\n                fieldType=\"text\"\n                pattern={'[a-z-]+'}\n                component={CustomInput}\n                validator={[requiredValidator]}\n              />\n            </label>\n\n            <label>\n              Version\n              <p className=\"tooltiptext\">Version of the algorithm.</p>\n              <Field\n                className=\"inputAlgorithm\"\n                name=\"version\"\n                fieldType=\"number\"\n                component={CustomInput}\n                validator={[requiredValidator]}\n              />\n            </label>\n\n            <label>\n              Algorithm Overview\n              <p className=\"tooltiptext\">Description of the algorithm.</p>\n              <Field\n                name=\"overview\"\n                max={500}\n                value={formRenderProps.valueGetter('overview')}\n                component={FormTextArea}\n                validator={[requiredValidator]}\n              />\n            </label>\n            <label>\n              Model Architecture\n              <p className=\"tooltiptext\">\n                Description of the architecture of the model.\n              </p>\n              <Field\n                name=\"architecture\"\n                max={500}\n                value={formRenderProps.valueGetter('architecture')}\n                component={FormTextArea}\n                validator={[requiredValidator]}\n              />\n            </label>\n            <label>\n              Model Performance\n              <p className=\"tooltiptext\">Performance of the model.</p>\n              <Field\n                name=\"performance\"\n                max={500}\n                value={formRenderProps.valueGetter('performance')}\n                component={FormTextArea}\n                validator={[requiredValidator]}\n              />\n            </label>\n            <label>\n              Data Description\n              <p className=\"tooltiptext\">Description of the used dataset.</p>\n              <Field\n                name=\"data\"\n                max={500}\n                value={formRenderProps.valueGetter('data')}\n                component={FormTextArea}\n                validator={[requiredValidator]}\n              />\n            </label>\n            <label>\n              Input\n              <p className=\"tooltiptext\">\n                Description of the input of the model.\n              </p>\n              <Field\n                name=\"input\"\n                max={500}\n                value={formRenderProps.valueGetter('input')}\n                component={FormTextArea}\n                validator={[requiredValidator]}\n              />\n            </label>\n            <label>\n              Output\n              <p className=\"tooltiptext\">\n                Description of the output of the model.\n              </p>\n              <Field\n                name=\"output\"\n                max={500}\n                value={formRenderProps.valueGetter('output')}\n                component={FormTextArea}\n                validator={[requiredValidator]}\n              />\n            </label>\n            <label>\n              References <i>(Optional)</i>\n              <p className=\"tooltiptext\">Possible references.</p>\n              <Field\n                name=\"references\"\n                max={500}\n                optional={'true'}\n                value={formRenderProps.valueGetter('references')}\n                component={FormTextArea}\n                validator={[]}\n              />\n            </label>\n            <label>\n              Additional Information <i>(Optional)</i>\n              <p className=\"tooltiptext\">Possible extra information.</p>\n              <Field\n                name=\"info\"\n                max={500}\n                optional={'true'}\n                value={formRenderProps.valueGetter('info')}\n                component={FormTextArea}\n                validator={[]}\n              />\n            </label>\n\n            <label>\n              Input Extension\n              <p className=\"tooltiptext\">\n                Extension of the input provided to the algorithm.\n              </p>\n              <select\n                className=\"selectAlgorithm\"\n                name=\"inputExtension\"\n                value={inputExtension}\n                onChange={e => setInputExtension(e.target.value)}\n                required\n              >\n                <option key=\"\"></option>\n                {['.dcm', '.nii.gz'].map(extension => (\n                  <option key={extension}>{extension}</option>\n                ))}\n              </select>\n            </label>\n\n            <label>\n              Input DICOM Modality\n              <p className=\"tooltiptext\">The modality of the provided input.</p>\n              <select\n                className=\"selectAlgorithm\"\n                name=\"inputModality\"\n                value={inputModality}\n                onChange={e => setInputModality(e.target.value)}\n                required\n              >\n                <option key=\"\"></option>\n                {modalities.map(modality => (\n                  <option key={modality}>{modality}</option>\n                ))}\n              </select>\n            </label>\n\n            <label>\n              Task\n              <p className=\"tooltiptext\">Task performed.</p>\n              <select\n                className=\"selectAlgorithm\"\n                name=\"task\"\n                value={type}\n                onChange={e => setType(e.target.value)}\n                required\n              >\n                <option key=\"\"></option>\n                {types.map(type => (\n                  <option key={type}>{type}</option>\n                ))}\n              </select>\n            </label>\n\n            <label>\n              Body Part Examined\n              <p className=\"tooltiptext\">\n                Text description of the part of the body examined.\n              </p>\n              <select\n                className=\"selectAlgorithm\"\n                name=\"bodyPart\"\n                value={bodyPart}\n                onChange={e => setBodyPart(e.target.value)}\n                required\n              >\n                <option key=\"\"></option>\n                {Object.keys(bodyParts).map(type => (\n                  <option key={type}>{type}</option>\n                ))}\n              </select>\n            </label>\n\n            <label>\n              Framework\n              <p className=\"tooltiptext\">Machine Learning Framework used.</p>\n              <select\n                className=\"selectAlgorithm\"\n                name=\"framework\"\n                value={framework}\n                onChange={e => setFramework(e.target.value)}\n                required\n              >\n                <option key=\"\"></option>\n                {[\n                  'Pytorch',\n                  'Monai',\n                  'Tensorflow',\n                  'Keras',\n                  'Scikit-Learn',\n                  'H20',\n                  'Spark',\n                  'Other',\n                ].map(framework => (\n                  <option key={framework}>{framework}</option>\n                ))}\n              </select>\n            </label>\n\n            <label>\n              Unrestricted: Public to every user\n              <p className=\"tooltiptext\">Visibility of the algorithm.</p>\n              <input\n                className=\"inputAlgorithm\"\n                name=\"visibility\"\n                type=\"checkbox\"\n                onChange={() => {\n                  handleVisibilityChange();\n                }}\n              />\n            </label>\n\n            <div className=\"btn-group\">\n              <NavBtnLink to=\"/\">Cancel</NavBtnLink>\n              <button disabled={!formRenderProps.allowSubmit}>Create</button>\n            </div>\n            {redirect ? (\n              <Redirect\n                to={{\n                  pathname: '/editor',\n                  state: {\n                    name: formRenderProps.valueGetter('name'),\n                    version: formRenderProps.valueGetter('version'),\n                    algorithm_overview: formRenderProps.valueGetter('overview'),\n                    model_architecture: formRenderProps.valueGetter(\n                      'architecture'\n                    ),\n                    model_performance: formRenderProps.valueGetter(\n                      'performance'\n                    ),\n                    data_description: formRenderProps.valueGetter('data'),\n                    input: formRenderProps.valueGetter('input'),\n                    output: formRenderProps.valueGetter('output'),\n                    references: formRenderProps.valueGetter('references'),\n                    additional_info: formRenderProps.valueGetter('info'),\n                    user: user.email,\n                    task: type,\n                    inputExtension: inputExtension,\n                    inputModality: inputModality,\n                    visibility: visibility,\n                    framework: framework,\n                    bodyPart: bodyPart,\n                  },\n                }}\n              />\n            ) : (\n              <Fragment></Fragment>\n            )}\n          </form>\n        )}\n      ></Form>\n      <ToastContainer\n        position=\"top-right\"\n        autoClose={5000}\n        hideProgressBar={false}\n        newestOnTop={false}\n        closeOnClick\n        rtl={false}\n        pauseOnFocusLoss\n        draggable\n        pauseOnHover\n      />\n    </div>\n  );\n}\n\nconst mapStateToProps = state => ({\n  user: state.auth.user,\n});\n\nconst ConnectedAddAlgorithm = connect(\n  mapStateToProps,\n  null\n)(AddAlgorithm);\n\nexport default ConnectedAddAlgorithm;\n"],"sourceRoot":""}