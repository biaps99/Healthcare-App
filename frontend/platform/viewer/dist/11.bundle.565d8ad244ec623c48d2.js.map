{"version":3,"sources":["webpack:///D:/tese/Bia_final/frontend_bia/platform/auth/src/containers/Add_models.js"],"names":["Add_or_Remove_models","props","user","groupName","useState","location","state","redirect","setRedirect","isLoaded","setIsLoaded","choice","setChoice","sharedModels","setSharedModels","models","setModels","selectedModelsToAdd","setSelectedModelsToAdd","selectedModelsToRemove","setSelectedModelsToRemove","name","version","task","filterValuesModels","setFilterValuesModels","sort","fieldName","direction","rowsPerPage","setRowsPerPage","pageNumber","setPageNumber","debouncedSort","useDebounce","debouncedFilters","useEffect","getModelList","group","response","sharedModelsNames","forEach","model","includes","push","removable","email","alert","fetchModels","mediumTableMetaModels","displayText","inputType","size","totalSizeModels","map","field","reduce","prev","next","handleModelsFilterChange","value","handleSelectModelToAdd","event","target","filter","selectedModelName","handleSelectAllModelsToAdd","length","handleSubmitAdd","document","getElementById","textContent","config","headers","Authorization","localStorage","getItem","Accept","form_data","FormData","append","JSON","stringify","axios","post","data","Status","handleSelectModelToRemove","selected","handleSelectAllModelsToRemove","handleSubmitRemove","className","style","marginTop","onChange","e","required","key","c","onSubmit","render","formRenderProps","maxWidth","marginBottom","fontSize","i","percentWidth","width","textAlign","meta","values","onValueChange","sortFieldName","sortDirection","color","paddingBottom","paddingLeft","type","checked","backgroundColor","colSpan","currentPage","pageOptions","nextPageFunc","prevPageFunc","onRowsPerPageChange","Rows","recordCount","id","onClick","to","match","params","defaults","xsrfHeaderName","xsrfCookieName","withCredentials","propTypes","PropTypes","object","connect","auth","load_user"],"mappings":"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","file":"11.bundle.565d8ad244ec623c48d2.js","sourcesContent":["/* eslint-disable react/no-unescaped-entities */\n/* eslint-disable react/prop-types */\nimport React, { useState, useEffect, Fragment } from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport axios from 'axios';\nimport { Form } from '@progress/kendo-react-form';\nimport 'react-toastify/dist/ReactToastify.css';\nimport { TableSearchFilter, TablePagination } from '@ohif/ui';\nimport { Redirect } from 'react-router-dom';\nimport { load_user } from '../actions/auth';\nimport './Add_group.css';\nimport { useDebounce } from '@ohif/ui';\nimport { getModelList } from './../../../viewer/src/modelList/ModelListRoute.js';\n\naxios.defaults.xsrfHeaderName = 'X-CSRFTOKEN';\naxios.defaults.xsrfCookieName = 'csrftoken';\naxios.defaults.withCredentials = true;\n\nfunction Add_or_Remove_models(props) {\n  const { user } = props;\n\n  const [groupName] = useState(props.location.state);\n  const [redirect, setRedirect] = useState(false);\n  const [isLoaded, setIsLoaded] = useState(false);\n  const [choice, setChoice] = useState('Add');\n\n  const [sharedModels, setSharedModels] = useState([]);\n  const [models, setModels] = useState([]);\n  const [selectedModelsToAdd, setSelectedModelsToAdd] = useState([]);\n  const [selectedModelsToRemove, setSelectedModelsToRemove] = useState([]);\n\n  const [filterValuesModels, setFilterValuesModels] = useState({\n    name: '',\n    version: '',\n    task: '',\n  });\n\n  const [sort] = useState({\n    fieldName: 'name',\n    direction: 'desc',\n  });\n\n  const [rowsPerPage, setRowsPerPage] = useState(5);\n  const [pageNumber, setPageNumber] = useState(0);\n  const debouncedSort = useDebounce(sort, 200);\n  const debouncedFilters = useDebounce(filterValuesModels, 250);\n\n  useEffect(() => {\n    const fetchModels = async () => {\n      try {\n        const response = await getModelList(\n          user,\n          {\n            group: groupName,\n          },\n          debouncedSort,\n          rowsPerPage\n        );\n\n        let sharedModelsNames = [];\n        response.forEach(function(model) {\n          if (!sharedModelsNames.includes(model['name'])) {\n            sharedModelsNames.push(model['name']);\n          }\n        });\n\n        let removable = [];\n\n        try {\n          const response = await getModelList(\n            user,\n            debouncedFilters,\n            debouncedSort,\n            rowsPerPage\n          );\n\n          let models = [];\n          response.forEach(function(model) {\n            if (\n              !models.includes(model) &&\n              !sharedModelsNames.includes(model['name']) &&\n              model['user'] === user.email &&\n              model['visibility'] === false\n            ) {\n              models.push(model);\n            } else if (sharedModelsNames.includes(model['name'])) {\n              removable.push(model);\n            }\n          });\n\n          setSharedModels(removable);\n          setModels(models);\n          setIsLoaded(true);\n        } catch (error) {\n          alert(error);\n        }\n      } catch (error) {\n        alert(error);\n      }\n    };\n\n    fetchModels();\n  }, [\n    debouncedFilters,\n    debouncedSort,\n    groupName,\n    rowsPerPage,\n    user,\n    selectedModelsToAdd,\n  ]);\n\n  const mediumTableMetaModels = [\n    {\n      displayText: 'ModelName',\n      fieldName: 'name',\n      inputType: 'text',\n      size: 200,\n    },\n    {\n      displayText: 'Version',\n      fieldName: 'version',\n      inputType: 'text',\n      size: 100,\n    },\n    {\n      displayText: 'Task',\n      fieldName: 'task',\n      inputType: 'text',\n      size: 200,\n    },\n  ];\n\n  const totalSizeModels = mediumTableMetaModels\n    .map(field => field.size)\n    .reduce((prev, next) => prev + next);\n\n  function handleModelsFilterChange(fieldName, value) {\n    setFilterValuesModels(state => {\n      return {\n        ...state,\n        [fieldName]: value,\n      };\n    });\n  }\n\n  const handleSelectModelToAdd = event => {\n    const name = event.target.value;\n\n    if (!selectedModelsToAdd.includes(name)) {\n      selectedModelsToAdd.push(name);\n    } else {\n      setSelectedModelsToAdd(\n        selectedModelsToAdd.filter(selectedModelName => {\n          return selectedModelName !== name;\n        })\n      );\n    }\n  };\n\n  const handleSelectAllModelsToAdd = () => {\n    if (selectedModelsToAdd.length < models.length) {\n      setSelectedModelsToAdd(models.map(({ name }) => name));\n    } else {\n      setSelectedModelsToAdd([]);\n    }\n  };\n\n  async function handleSubmitAdd() {\n    if (selectedModelsToAdd.length == 0) {\n      let text = document.getElementById('message2');\n      text.textContent = 'At least one model must be selected!';\n    } else {\n      try {\n        const config = {\n          headers: {\n            Authorization: `JWT ${localStorage.getItem('access')}`,\n            'Content-Type': 'application/json',\n            Accept: 'application/json',\n          },\n        };\n        let form_data = new FormData();\n        form_data.append('groupName', groupName);\n        form_data.append('models', JSON.stringify(selectedModelsToAdd));\n\n        const res = await axios.post(\n          `/api/investigator_add_models`,\n          form_data,\n          config\n        );\n\n        if (res.data.Status === true) {\n          setRedirect(true);\n        } else {\n          alert('Error while adding models');\n        }\n      } catch (err) {\n        alert(err);\n      }\n    }\n  }\n\n  const handleSelectModelToRemove = event => {\n    const name = event.target.value;\n\n    if (!selectedModelsToRemove.includes(name)) {\n      selectedModelsToRemove.push(name);\n    } else {\n      setSelectedModelsToRemove(\n        selectedModelsToRemove.filter(selected => {\n          return selected !== name;\n        })\n      );\n    }\n  };\n\n  const handleSelectAllModelsToRemove = () => {\n    if (selectedModelsToRemove.length < sharedModels.length) {\n      setSelectedModelsToRemove(sharedModels.map(({ name }) => name));\n    } else {\n      setSelectedModelsToRemove([]);\n    }\n  };\n\n  async function handleSubmitRemove() {\n    if (selectedModelsToRemove.length === 0) {\n      let text = document.getElementById('message2');\n      text.textContent = 'At least one model must be selected!';\n    } else {\n      try {\n        const config = {\n          headers: {\n            Authorization: `JWT ${localStorage.getItem('access')}`,\n            'Content-Type': 'application/json',\n            Accept: 'application/json',\n          },\n        };\n        let form_data = new FormData();\n        form_data.append('groupName', groupName);\n        form_data.append('models', JSON.stringify(selectedModelsToRemove));\n\n        const res = await axios.post(\n          `/api/investigator_remove_models`,\n          form_data,\n          config\n        );\n\n        if (res.data.Status === true) {\n          setRedirect(true);\n        } else {\n          alert('Error while removing models');\n        }\n      } catch (err) {\n        alert(err);\n      }\n    }\n  }\n\n  if (localStorage.getItem('Investigator_Authenticated') && isLoaded) {\n    return (\n      <Fragment>\n        <div className=\"content\" style={{ marginTop: '5px' }}>\n          <h4>Add or Remove?</h4>\n          <p className=\"tooltiptext\">\n            Choose if you want to <b>remove</b> or <b>add</b> models from group\n            \"{groupName}\".\n          </p>\n          <select\n            className=\"select\"\n            name=\"choice\"\n            value={choice}\n            onChange={e => setChoice(e.target.value)}\n            required\n          >\n            <option key=\"\"></option>\n            {['Add', 'Remove'].map(c => (\n              <option key={c}>{c}</option>\n            ))}\n          </select>\n          {choice === 'Add' ? (\n            <Form\n              className=\"addGroup\"\n              onSubmit={handleSubmitAdd}\n              render={formRenderProps => (\n                <form\n                  className=\"addGroup\"\n                  style={{\n                    maxWidth: 650,\n                  }}\n                  onSubmit={formRenderProps.onSubmit}\n                >\n                  <fieldset className={'k-form-fieldset'}>\n                    <div className=\"mb-3\">\n                      <legend\n                        className={'k-form-legend'}\n                        style={{\n                          marginBottom: '10px',\n                          marginTop: '5px',\n                          fontSize: '14px',\n                        }}\n                      >\n                        <b>Share models:</b>\n                      </legend>\n\n                      <table className=\"table\">\n                        <colgroup>\n                          {mediumTableMetaModels.map((field, i) => {\n                            const size = field.size;\n                            const percentWidth =\n                              (size / totalSizeModels) * 100.0;\n\n                            return (\n                              <col\n                                key={i}\n                                style={{\n                                  width: `${percentWidth}%`,\n                                  textAlign: 'center',\n                                }}\n                              />\n                            );\n                          })}\n                        </colgroup>\n                        <thead className=\"table-head\">\n                          <tr className=\"filters\">\n                            <TableSearchFilter\n                              meta={mediumTableMetaModels}\n                              values={filterValuesModels}\n                              onValueChange={handleModelsFilterChange}\n                              sortFieldName={'name'}\n                              sortDirection={'asc'}\n                            />\n                            <th\n                              style={{\n                                color: 'black',\n                                paddingBottom: '15px',\n                                paddingLeft: '8px',\n                              }}\n                              className=\"text-left\"\n                            >\n                              <input\n                                type=\"checkbox\"\n                                checked={\n                                  selectedModelsToAdd.length === models.length\n                                }\n                                onChange={handleSelectAllModelsToAdd}\n                              />\n                            </th>\n                          </tr>\n                        </thead>\n                        <tbody className=\"table-body\">\n                          {/* EMPTY */}\n                          {!models.length && (\n                            <tr style={{ backgroundColor: '#5F9EA0' }}>\n                              <td colSpan={mediumTableMetaModels.length}>\n                                <div>{'No matching results'}</div>\n                              </td>\n                            </tr>\n                          )}\n                          {models.map(({ name, version, task }) => {\n                            return (\n                              <tr\n                                style={{ backgroundColor: '#5F9EA0' }}\n                                key={name}\n                              >\n                                <td className=\"text-center\">{name}</td>\n                                <td className=\"text-center\">{version}</td>\n                                <td className=\"text-center\">{task}</td>\n                                <td\n                                  style={{\n                                    paddingLeft: '8px',\n                                  }}\n                                >\n                                  <input\n                                    type=\"checkbox\"\n                                    value={name}\n                                    checked={selectedModelsToAdd.includes(name)}\n                                    onChange={handleSelectModelToAdd}\n                                  />\n                                </td>\n                              </tr>\n                            );\n                          })}\n                        </tbody>\n                      </table>\n\n                      <TablePagination\n                        currentPage={pageNumber}\n                        pageOptions={[5, 10, 15]}\n                        nextPageFunc={() => setPageNumber(pageNumber + 1)}\n                        prevPageFunc={() => setPageNumber(pageNumber - 1)}\n                        onRowsPerPageChange={Rows => setRowsPerPage(Rows)}\n                        rowsPerPage={rowsPerPage}\n                        recordCount={models.length}\n                      />\n\n                      <div\n                        className=\"message\"\n                        id=\"message2\"\n                        style={{ color: 'red' }}\n                      ></div>\n                    </div>\n                  </fieldset>\n                  <div className=\"k-form-buttons\">\n                    <button\n                      className=\"k-button k-button-md k-rounded-md k-button-solid k-button-solid-base\"\n                      onClick={() => handleSubmitAdd()}\n                    >\n                      Add\n                    </button>\n                  </div>\n                </form>\n              )}\n            />\n          ) : choice === 'Remove' ? (\n            <Form\n              className=\"addGroup\"\n              onSubmit={handleSubmitRemove}\n              render={formRenderProps => (\n                <form\n                  className=\"addGroup\"\n                  style={{\n                    maxWidth: 650,\n                  }}\n                  onSubmit={formRenderProps.onSubmit}\n                >\n                  <fieldset className={'k-form-fieldset'}>\n                    <div className=\"mb-3\">\n                      <legend\n                        className={'k-form-legend'}\n                        style={{\n                          marginBottom: '10px',\n                          marginTop: '5px',\n                          fontSize: '14px',\n                        }}\n                      >\n                        <b>Remove models:</b>\n                      </legend>\n\n                      <table className=\"table\">\n                        <colgroup>\n                          {mediumTableMetaModels.map((field, i) => {\n                            const size = field.size;\n                            const percentWidth =\n                              (size / totalSizeModels) * 100.0;\n\n                            return (\n                              <col\n                                key={i}\n                                style={{\n                                  width: `${percentWidth}%`,\n                                  textAlign: 'center',\n                                }}\n                              />\n                            );\n                          })}\n                        </colgroup>\n                        <thead className=\"table-head\">\n                          <tr className=\"filters\">\n                            <TableSearchFilter\n                              meta={mediumTableMetaModels}\n                              values={filterValuesModels}\n                              onValueChange={handleModelsFilterChange}\n                              sortFieldName={'name'}\n                              sortDirection={'asc'}\n                            />\n                            <th\n                              style={{\n                                color: 'black',\n                                paddingBottom: '15px',\n                                paddingLeft: '8px',\n                              }}\n                              className=\"text-left\"\n                            >\n                              <input\n                                type=\"checkbox\"\n                                checked={\n                                  selectedModelsToRemove.length ===\n                                  sharedModels.length\n                                }\n                                onChange={handleSelectAllModelsToRemove}\n                              />\n                            </th>\n                          </tr>\n                        </thead>\n                        <tbody className=\"table-body\">\n                          {/* EMPTY */}\n                          {!sharedModels.length && (\n                            <tr style={{ backgroundColor: '#5F9EA0' }}>\n                              <td colSpan={mediumTableMetaModels.length}>\n                                <div>{'No matching results'}</div>\n                              </td>\n                            </tr>\n                          )}\n                          {sharedModels.map(({ name, version, task }) => {\n                            return (\n                              <tr\n                                style={{ backgroundColor: '#5F9EA0' }}\n                                key={name}\n                              >\n                                <td className=\"text-center\">{name}</td>\n                                <td className=\"text-center\">{version}</td>\n                                <td className=\"text-center\">{task}</td>\n                                <td\n                                  style={{\n                                    paddingLeft: '8px',\n                                  }}\n                                >\n                                  <input\n                                    type=\"checkbox\"\n                                    value={name}\n                                    checked={selectedModelsToRemove.includes(\n                                      name\n                                    )}\n                                    onChange={handleSelectModelToRemove}\n                                  />\n                                </td>\n                              </tr>\n                            );\n                          })}\n                        </tbody>\n                      </table>\n\n                      <TablePagination\n                        currentPage={pageNumber}\n                        pageOptions={[5, 10, 15]}\n                        nextPageFunc={() => setPageNumber(pageNumber + 1)}\n                        prevPageFunc={() => setPageNumber(pageNumber - 1)}\n                        onRowsPerPageChange={Rows => setRowsPerPage(Rows)}\n                        rowsPerPage={rowsPerPage}\n                        recordCount={models.length}\n                      />\n\n                      <div\n                        className=\"message\"\n                        id=\"message2\"\n                        style={{ color: 'red' }}\n                      ></div>\n                    </div>\n                  </fieldset>\n                  <div className=\"k-form-buttons\">\n                    <button\n                      className=\"k-button k-button-md k-rounded-md k-button-solid k-button-solid-base\"\n                      onClick={() => handleSubmitRemove()}\n                    >\n                      Remove\n                    </button>\n                  </div>\n                </form>\n              )}\n            />\n          ) : null}\n          {redirect ? (\n            <Redirect to={'/view_models/' + groupName} />\n          ) : (\n            <Fragment></Fragment>\n          )}\n        </div>\n      </Fragment>\n    );\n  } else if (localStorage.getItem('HealthProfessional_Authenticated')) {\n    return (\n      <Fragment>\n        <div className=\"content\">\n          {redirect ? (\n            <Redirect\n              to={`/group_details/${props.match.params.name}/${user['email']}`}\n            />\n          ) : (\n            <Fragment></Fragment>\n          )}\n        </div>\n      </Fragment>\n    );\n  } else {\n    return null;\n  }\n}\n\nAdd_or_Remove_models.propTypes = {\n  user: PropTypes.object,\n};\n\nconst mapStateToProps = state => ({\n  user: state.auth.user,\n});\n\nexport default connect(\n  mapStateToProps,\n  { load_user }\n)(Add_or_Remove_models);\n"],"sourceRoot":""}